<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omnifactotum</name>
    </assembly>
    <members>
        <member name="T:Omnifactotum.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.AspMvcActionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.AspMvcActionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.AspMvcActionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.AspMvcActionAttribute"/> class.
            </summary>
            <param name="anonymousProperty">
            The anonymous property.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.AspMvcActionAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.PathReferenceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.PathReferenceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.PathReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.PathReferenceAttribute"/> class.
            </summary>
            <param name="basePath">
            The base path.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.PathReferenceAttribute.BasePath">
            <summary>
            Gets the base path.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.AspMvcAreaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.AspMvcAreaAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.AspMvcAreaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.AspMvcAreaAttribute"/> class.
            </summary>
            <param name="anonymousProperty">
            The anonymous property.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.AspMvcAreaAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.AspMvcControllerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.AspMvcControllerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.AspMvcControllerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.AspMvcControllerAttribute"/> class.
            </summary>
            <param name="anonymousProperty">
            The anonymous property.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.AspMvcControllerAttribute.AnonymousProperty">
            <summary>
            Gets the anonymous property.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="M:Omnifactotum.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.BaseTypeRequiredAttribute"/> class.
            </summary>
            <param name="baseType">
            The base type.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.BaseTypeRequiredAttribute.BaseType">
            <summary>
            Gets the base type.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Omnifactotum.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Omnifactotum.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="M:Omnifactotum.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.ContractAnnotationAttribute"/> class.
            </summary>
            <param name="contract">
            The contract.
            </param>
        </member>
        <member name="M:Omnifactotum.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.ContractAnnotationAttribute"/> class.
            </summary>
            <param name="contract">
            The contract.
            </param>
            <param name="forceFullStates">
            The force full states.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.ContractAnnotationAttribute.Contract">
            <summary>
            Gets the contract.
            </summary>
        </member>
        <member name="P:Omnifactotum.Annotations.ContractAnnotationAttribute.ForceFullStates">
            <summary>
            Gets a value indicating whether force full states.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.HtmlAttributeValueAttribute">
            <summary>
            The html attribute value attribute.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.HtmlAttributeValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.HtmlAttributeValueAttribute"/> class.
            </summary>
            <param name="name">
            The name to initialize with.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.HtmlAttributeValueAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.HtmlElementAttributesAttribute">
            <summary>
            The html element attributes attribute.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.HtmlElementAttributesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.HtmlElementAttributesAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.HtmlElementAttributesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.HtmlElementAttributesAttribute"/> class.
            </summary>
            <param name="name">
            The name to initialize with.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.HtmlElementAttributesAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.ImplicitUseKindFlags">
            <summary>
            The implicit use kind flags.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseKindFlags.Default">
            <summary>
                The default set of the flags.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseKindFlags.Access">
            <summary>
                Only entity marked with attribute considered used.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
                Indicates implicit assignment to a member.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly when marked with <see cref="T:Omnifactotum.Annotations.MeansImplicitUseAttribute"/>
                or <see cref="T:Omnifactotum.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseTargetFlags.Default">
            <summary>
                The default set of the flags.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseTargetFlags.Itself">
            <summary>
                The entity marked with the attribute is considered used.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
                The members of the entity marked with the attribute are considered used.
            </summary>
        </member>
        <member name="F:Omnifactotum.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
                The entity marked with the attribute and all its members are considered used.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Omnifactotum.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="M:Omnifactotum.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required">
            The required.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether required.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.MeansImplicitUseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.MeansImplicitUseAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.MeansImplicitUseAttribute.#ctor(Omnifactotum.Annotations.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.MeansImplicitUseAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
        </member>
        <member name="M:Omnifactotum.Annotations.MeansImplicitUseAttribute.#ctor(Omnifactotum.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.MeansImplicitUseAttribute"/> class.
            </summary>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="M:Omnifactotum.Annotations.MeansImplicitUseAttribute.#ctor(Omnifactotum.Annotations.ImplicitUseKindFlags,Omnifactotum.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.MeansImplicitUseAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.MeansImplicitUseAttribute.UseKindFlags">
            <summary>
            Gets the use kind flags.
            </summary>
        </member>
        <member name="P:Omnifactotum.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets the target flags.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the method is contained in a type that implements
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
            and this method is used to notify that some property value changed
            </summary>
            <remarks>
            The method should be non-static and conform to one of the supported signatures:
            <list>
            <item><c>NotifyChanged(string)</c></item>
            <item><c>NotifyChanged(params string[])</c></item>
            <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
            <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
            <item><c>SetProperty{T}(ref T, T, string)</c></item>
            </list>
            </remarks>
            <example><code>
            public class Foo : INotifyPropertyChanged {
              public event PropertyChangedEventHandler PropertyChanged;
              [NotifyPropertyChangedInvocator]
              protected virtual void NotifyChanged(string propertyName) { ... }
              private string _name;
              public string Name {
                get { return _name; }
                set { _name = value; NotifyChanged("LastName"); /* Warning */ }
              }
            }
            </code>
            Examples of generated notifications:
            <list>
            <item><c>NotifyChanged("Property")</c></item>
            <item><c>NotifyChanged(() =&gt; Property)</c></item>
            <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
            <item><c>SetProperty(ref myField, value, "Property")</c></item>
            </list>
            </example>
        </member>
        <member name="M:Omnifactotum.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.NotifyPropertyChangedInvocatorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.NotifyPropertyChangedInvocatorAttribute"/> class.
            </summary>
            <param name="parameterName">
            The parameter name.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.NotifyPropertyChangedInvocatorAttribute.ParameterName">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Omnifactotum.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.PublicAPIAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.PublicAPIAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.PublicAPIAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.PublicAPIAttribute"/> class.
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.PublicAPIAttribute.Comment">
            <summary>
            Gets the comment.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>.
            </summary>
            <example>
                <code>
                [Pure]
                private int Multiply(int x, int y) { return x * y; }
                
                public void Foo()
                {
                    const int a = 2, b = 2;
                    Multiply(a, b); // Warning: Return value of pure method is not used
                }
                </code>
            </example>
        </member>
        <member name="T:Omnifactotum.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Omnifactotum.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.StringFormatMethodAttribute"/> class.
            The string format method attribute.
            </summary>
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets the format parameter name.
            </summary>
        </member>
        <member name="T:Omnifactotum.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.UsedImplicitlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Annotations.UsedImplicitlyAttribute.#ctor(Omnifactotum.Annotations.ImplicitUseKindFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
        </member>
        <member name="M:Omnifactotum.Annotations.UsedImplicitlyAttribute.#ctor(Omnifactotum.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="M:Omnifactotum.Annotations.UsedImplicitlyAttribute.#ctor(Omnifactotum.Annotations.ImplicitUseKindFlags,Omnifactotum.Annotations.ImplicitUseTargetFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Omnifactotum.Annotations.UsedImplicitlyAttribute"/> class.
            </summary>
            <param name="useKindFlags">
            The use kind flags.
            </param>
            <param name="targetFlags">
            The target flags.
            </param>
        </member>
        <member name="P:Omnifactotum.Annotations.UsedImplicitlyAttribute.UseKindFlags">
            <summary>
            Gets the use kind flags.
            </summary>
        </member>
        <member name="P:Omnifactotum.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets the target flags.
            </summary>
        </member>
        <member name="T:Omnifactotum.AsyncFactotum">
            <summary>
                Provides helper methods and properties for asynchronous programming.
            </summary>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync(System.Action,Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync(System.Action,Omnifactotum.AsyncFactotum.LogErrorWithException)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync(System.Action,Omnifactotum.AsyncFactotum.LogErrorWithMessage)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync(System.Action)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``1(System.Action{``0},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``1(System.Action{``0},Omnifactotum.AsyncFactotum.LogErrorWithException,``0)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``1(System.Action{``0},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``1(System.Action{``0},``0)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``2(System.Action{``0,``1},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``2(System.Action{``0,``1},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``2(System.Action{``0,``1},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``2(System.Action{``0,``1},``0,``1)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``3(System.Action{``0,``1,``2},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``3(System.Action{``0,``1,``2},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``3(System.Action{``0,``1,``2},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``4(System.Action{``0,``1,``2,``3},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``4(System.Action{``0,``1,``2,``3},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``4(System.Action{``0,``1,``2,``3},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``5(System.Action{``0,``1,``2,``3,``4},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``5(System.Action{``0,``1,``2,``3,``4},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``5(System.Action{``0,``1,``2,``3,``4},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``6(System.Action{``0,``1,``2,``3,``4,``5},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``6(System.Action{``0,``1,``2,``3,``4,``5},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``6(System.Action{``0,``1,``2,``3,``4,``5},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Executes the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ExecuteAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Executes the specified method asynchronously.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.TraceErrorInternal(System.String)">
            <summary>
                Wraps the <see cref="M:System.Diagnostics.Trace.TraceError(System.String)"/> method since it is conditional and thus cannot be
                used directly as a delegate.
            </summary>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``1(System.Func{``0},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``1(System.Func{``0},Omnifactotum.AsyncFactotum.LogErrorWithException)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``1(System.Func{``0},Omnifactotum.AsyncFactotum.LogErrorWithMessage)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``1(System.Func{``0})">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``2(System.Func{``0,``1},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``2(System.Func{``0,``1},Omnifactotum.AsyncFactotum.LogErrorWithException,``0)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``2(System.Func{``0,``1},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``2(System.Func{``0,``1},``0)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``3(System.Func{``0,``1,``2},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``3(System.Func{``0,``1,``2},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``3(System.Func{``0,``1,``2},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``4(System.Func{``0,``1,``2,``3},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``4(System.Func{``0,``1,``2,``3},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``4(System.Func{``0,``1,``2,``3},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``5(System.Func{``0,``1,``2,``3,``4},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``5(System.Func{``0,``1,``2,``3,``4},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``5(System.Func{``0,``1,``2,``3,``4},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``6(System.Func{``0,``1,``2,``3,``4,``5},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``6(System.Func{``0,``1,``2,``3,``4,``5},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``6(System.Func{``0,``1,``2,``3,``4,``5},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},Omnifactotum.AsyncFactotum.LogErrorWithException,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},Omnifactotum.AsyncFactotum.LogErrorWithMessage,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Computes a result of the specified method asynchronously using the specified exception logging method.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="logError">
                A reference to a method that will log an exception occurred during execution of asynchronous
                operation.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
                <para>- or -</para>
                <para><paramref name="logError"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:Omnifactotum.AsyncFactotum.ComputeAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
                Computes a result of the specified method asynchronously using the default options.
                This method uses <see cref="T:System.Diagnostics.Trace"/> to log asynchronous operation errors.
            </summary>
            <typeparam name="T1">
                The type of the 1st argument of the method.
            </typeparam>
            <typeparam name="T2">
                The type of the 2nd argument of the method.
            </typeparam>
            <typeparam name="T3">
                The type of the 3rd argument of the method.
            </typeparam>
            <typeparam name="T4">
                The type of the 4th argument of the method.
            </typeparam>
            <typeparam name="T5">
                The type of the 5th argument of the method.
            </typeparam>
            <typeparam name="T6">
                The type of the 6th argument of the method.
            </typeparam>
            <typeparam name="T7">
                The type of the 7th argument of the method.
            </typeparam>
            <typeparam name="T8">
                The type of the 8th argument of the method.
            </typeparam>
            <typeparam name="T9">
                The type of the 9th argument of the method.
            </typeparam>
            <typeparam name="T10">
                The type of the 10th argument of the method.
            </typeparam>
            <typeparam name="T11">
                The type of the 11th argument of the method.
            </typeparam>
            <typeparam name="T12">
                The type of the 12th argument of the method.
            </typeparam>
            <typeparam name="T13">
                The type of the 13th argument of the method.
            </typeparam>
            <typeparam name="T14">
                The type of the 14th argument of the method.
            </typeparam>
            <typeparam name="T15">
                The type of the 15th argument of the method.
            </typeparam>
            <typeparam name="T16">
                The type of the 16th argument of the method.
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the method.
            </typeparam>
            <param name="callee">
                The method that is run asynchronously.
            </param>
            <param name="arg1">
                The 1st argument of the method.
            </param>
            <param name="arg2">
                The 2nd argument of the method.
            </param>
            <param name="arg3">
                The 3rd argument of the method.
            </param>
            <param name="arg4">
                The 4th argument of the method.
            </param>
            <param name="arg5">
                The 5th argument of the method.
            </param>
            <param name="arg6">
                The 6th argument of the method.
            </param>
            <param name="arg7">
                The 7th argument of the method.
            </param>
            <param name="arg8">
                The 8th argument of the method.
            </param>
            <param name="arg9">
                The 9th argument of the method.
            </param>
            <param name="arg10">
                The 10th argument of the method.
            </param>
            <param name="arg11">
                The 11th argument of the method.
            </param>
            <param name="arg12">
                The 12th argument of the method.
            </param>
            <param name="arg13">
                The 13th argument of the method.
            </param>
            <param name="arg14">
                The 14th argument of the method.
            </param>
            <param name="arg15">
                The 15th argument of the method.
            </param>
            <param name="arg16">
                The 16th argument of the method.
            </param>
            <returns>
                A task that is executing or has executed the specified method asynchronously.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="callee"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="T:Omnifactotum.AsyncFactotum.LogErrorWithException">
            <summary>
                Encapsulates a method that logs the specified exception occurred during execution of an asynchronous
                operation.
            </summary>
            <param name="exception">
                The exception to log.
            </param>
        </member>
        <member name="T:Omnifactotum.AsyncFactotum.LogErrorWithExceptionAndMessage">
            <summary>
                Encapsulates a method that logs the specified exception occurred during execution of an asynchronous
                operation and the specified message.
            </summary>
            <param name="exception">
                The exception to log.
            </param>
            <param name="message">
                The message to log.
            </param>
        </member>
        <member name="T:Omnifactotum.AsyncFactotum.LogErrorWithMessage">
            <summary>
                Encapsulates a method that logs the specified message in case when an exception has occurred during
                execution of an asynchronous operation.
            </summary>
            <param name="message">
                The message to log.
            </param>
        </member>
        <member name="T:Omnifactotum.ByReferenceEqualityComparer`1">
            <summary>
                Represents the equality comparer that compares objects of the specified type by their references.
                If the type <typeparamref name="T"/> represents a value type, then the objects are compared using
                the default comparer for the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
                The type of objects to compare.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.ByReferenceEqualityComparer`1.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:Omnifactotum.ByReferenceEqualityComparer`1"/> class
                from being created.
            </summary>
        </member>
        <member name="M:Omnifactotum.ByReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Determines whether the specified objects are equal by reference.
            </summary>
            <param name="x">
                The first object of type <typeparamref name="T"/> to compare.
            </param>
            <param name="y">
                The second object of type <typeparamref name="T"/> to compare.
            </param>
            <returns>
                <c>true</c> if the specified objects are equal by reference; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ByReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for the specified object, based on object's reference.
            </summary>
            <param name="obj">
                The object for which a hash code is to be returned.
            </param>
            <returns>
                A hash code for the specified object, based on object's reference.
            </returns>
        </member>
        <member name="P:Omnifactotum.ByReferenceEqualityComparer`1.Instance">
            <summary>
                Gets the sole instance of the <see cref="T:Omnifactotum.ByReferenceEqualityComparer`1"/> class.
            </summary>
        </member>
        <member name="T:Omnifactotum.ColoredConsoleTraceListener">
            <summary>
                Represents the colored console trace listener.
            </summary>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ColoredConsoleTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Close">
            <summary>
                Closes the <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"/> so that it no longer receives tracing or
                debugging output.
            </summary>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Fail(System.String)">
            <summary>
                Emits an error message to the listener you create when you implement
                the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">
                A message to emit.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Fail(System.String,System.String)">
            <summary>
                Emits an error message and a detailed error message to the listener you create when
                you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
                Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">
                A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and
                stack trace information.
            </param>
            <param name="source">
                A name used to identify the output, typically the name of the application that generated
                the trace event.
            </param>
            <param name="eventType">
                One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
            </param>
            <param name="id">
                A numeric identifier for the event.
            </param>
            <param name="data">
                The trace data to emit.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
                Writes trace information, an array of data objects and event information to
                the listener specific output.
            </summary>
            <param name="eventCache">
                A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and
                stack trace information.
            </param>
            <param name="source">
                A name used to identify the output, typically the name of the application that generated
                the trace event.
            </param>
            <param name="eventType">
                One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
            </param>
            <param name="id">
                A numeric identifier for the event.
            </param>
            <param name="data">
                An array of objects to emit as data.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
                Writes trace and event information to the listener specific output.
            </summary>
            <param name="eventCache">
                A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID,
                thread ID, and stack trace information.</param>
            <param name="source">
                A name used to identify the output, typically the name of the application that generated
                the trace event.
            </param>
            <param name="eventType">
                One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
            </param>
            <param name="id">
                A numeric identifier for the event.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
                Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">
                A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and
                stack trace information.
            </param>
            <param name="source">
                A name used to identify the output, typically the name of the application that generated
                the trace event.
            </param>
            <param name="eventType">
                One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
            </param>
            <param name="id">
                A numeric identifier for the event.
            </param>
            <param name="message">
                A message to write.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
                Writes trace information, a formatted array of objects and event information to
                the listener specific output.
            </summary>
            <param name="eventCache">
                A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and
                stack trace information.
            </param>
            <param name="source">
                A name used to identify the output, typically the name of the application that generated
                the trace event.
            </param>
            <param name="eventType">
                One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
            </param>
            <param name="id">
                A numeric identifier for the event.
            </param>
            <param name="format">
                A format string that contains zero or more format items, which correspond to objects in
                the <paramref name="args"/> array.
            </param>
            <param name="args">
                An object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
                Writes trace information, a message, a related activity identity and event information to
                the listener specific output.
            </summary>
            <param name="eventCache">
                A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and
                stack trace information.
            </param>
            <param name="source">
                A name used to identify the output, typically the name of the application that generated
                the trace event.
            </param>
            <param name="id">
                A numeric identifier for the event.
            </param>
            <param name="message">
                A message to write.
            </param>
            <param name="relatedActivityId">
                A <see cref="T:System.Guid"/> object identifying a related activity.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Write(System.String)">
            <summary>
                Writes a message to this instance's <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"/>.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.WriteLine(System.String)">
            <summary>
                Writes a message to this instance's <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer"/> followed by
                a line terminator. The default line terminator is a carriage return followed by a line feed (\r\n).
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Write(System.Object)">
            <summary>
                Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create
                when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">
                An <see cref="T:System.Object"/> whose fully qualified class name you want to write.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Write(System.String,System.String)">
            <summary>
                Writes a category name and a message to the listener you create when
                you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">
                A message to write.
            </param>
            <param name="category">
                A category name used to organize the output.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.Write(System.Object,System.String)">
            <summary>
                Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to
                the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">
                An <see cref="T:System.Object"/> whose fully qualified class name you want to write.
            </param>
            <param name="category">
                A category name used to organize the output.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.WriteLine(System.Object)">
            <summary>
                Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create
                when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">
                An <see cref="T:System.Object"/> whose fully qualified class name you want to write.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.WriteLine(System.String,System.String)">
            <summary>
                Writes a category name and a message to the listener you create when you implement
                the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="message">
                A message to write.
            </param>
            <param name="category">
                A category name used to organize the output.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.WriteLine(System.Object,System.String)">
            <summary>
                Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to
                the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class,
                followed by a line terminator.
            </summary>
            <param name="o">
                An <see cref="T:System.Object"/> whose fully qualified class name you want to write.
            </param>
            <param name="category">
                A category name used to organize the output.
            </param>
        </member>
        <member name="M:Omnifactotum.ColoredConsoleTraceListener.WriteIndent">
            <summary>
                Writes the indent to the listener you create when you implement this class, and resets
                the <see cref="P:System.Diagnostics.TraceListener.NeedIndent"/> property to <c>false</c>.
            </summary>
        </member>
        <member name="P:Omnifactotum.ColoredConsoleTraceListener.IsThreadSafe">
            <summary>
                Gets a value indicating whether the trace listener is thread safe.
            </summary>
            <returns>
                <c>true</c> if the trace listener is thread safe; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Omnifactotum.ColoredConsoleTraceListener.ErrorColor">
            <summary>
                Gets or sets the color used for error messages.
            </summary>
        </member>
        <member name="P:Omnifactotum.ColoredConsoleTraceListener.WarningColor">
            <summary>
                Gets or sets the color used for warning messages.
            </summary>
        </member>
        <member name="P:Omnifactotum.ColoredConsoleTraceListener.InformationColor">
            <summary>
                Gets or sets the color used for information messages.
            </summary>
        </member>
        <member name="P:Omnifactotum.ColoredConsoleTraceListener.MessageColor">
            <summary>
                Gets or sets the color used for non-specific messages.
            </summary>
        </member>
        <member name="T:Omnifactotum.ComparableObjectBase">
            <summary>
                Represents the abstract container that supports comparison.
            </summary>
        </member>
        <member name="T:Omnifactotum.EquatableObjectBase">
            <summary>
                Represents the abstract container that supports comparison for equality.
            </summary>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.op_Equality(Omnifactotum.EquatableObjectBase,Omnifactotum.EquatableObjectBase)">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.EquatableObjectBase"/> instances are equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.EquatableObjectBase"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.EquatableObjectBase"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.EquatableObjectBase"/> instances are equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.op_Inequality(Omnifactotum.EquatableObjectBase,Omnifactotum.EquatableObjectBase)">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.EquatableObjectBase"/> instances are not equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.EquatableObjectBase"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.EquatableObjectBase"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.EquatableObjectBase"/> instances are not equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.EquatableObjectBase"/>.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.EquatableObjectBase"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.GetHashCode">
            <summary>
                Returns a hash code for this <see cref="T:Omnifactotum.EquatableObjectBase"/>.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like
                a hash table.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.Equals(Omnifactotum.EquatableObjectBase)">
            <summary>
                Determines whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
            </param>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other"/> parameter;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.GetHashCodeInternal">
            <summary>
                Returns a hash code for this <see cref="T:Omnifactotum.EquatableObjectBase"/>.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like
                a hash table.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableObjectBase.EqualsInternal(Omnifactotum.EquatableObjectBase)">
            <summary>
                Determines whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object. The parameter is checked prior to calling this method, therefore
                it is never <c>null</c> in this method and also can be safely cast to an actual derived type.
            </param>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other"/> parameter;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.op_LessThan(Omnifactotum.ComparableObjectBase,Omnifactotum.ComparableObjectBase)">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is less than
                the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is less than
                the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.op_LessThanOrEqual(Omnifactotum.ComparableObjectBase,Omnifactotum.ComparableObjectBase)">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is less than or equal
                to the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is less than or equal to
                the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.op_GreaterThan(Omnifactotum.ComparableObjectBase,Omnifactotum.ComparableObjectBase)">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is greater than
                the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is greater than
                the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.op_GreaterThanOrEqual(Omnifactotum.ComparableObjectBase,Omnifactotum.ComparableObjectBase)">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is greater than or equal
                to the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableObjectBase"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableObjectBase"/> instance is greater than or equal to
                the right <see cref="T:Omnifactotum.ComparableObjectBase"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.CompareTo(Omnifactotum.ComparableObjectBase)">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
            </param>
            <returns>
                A value that indicates the relative order of the objects being compared.
                See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                The <paramref name="other"/> object's type differs from this object's type.
            </exception>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.EqualsInternal(Omnifactotum.EquatableObjectBase)">
            <summary>
                <para>
                    Determines whether the current object is equal to another object of the same type.
                </para>
                <para>
                    <b>IMPORTANT NOTE</b>: Default implementation of this method simply calls
                    the <see cref="M:Omnifactotum.ComparableObjectBase.CompareToInternal(Omnifactotum.ComparableObjectBase)"/> method, which may not always be
                    the best option from the performance perspective.
                </para>
            </summary>
            <param name="other">
                An object to compare with this object. The parameter is checked prior to calling this method, therefore
                it is never <c>null</c> and can also be safely cast to an actual derived type.
            </param>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other"/> parameter;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableObjectBase.CompareToInternal(Omnifactotum.ComparableObjectBase)">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
            </param>
            <returns>
                A value that indicates the relative order of the objects being compared.
                See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </returns>
        </member>
        <member name="T:Omnifactotum.ComparableValueCapsule`1">
            <summary>
                <para>
                    Represents the abstract immutable container that encapsulates a strongly-typed value and supports
                    comparison.
                </para>
                <para>
                    <b>IMPORTANT</b> note for inheritors: a derived class MUST NOT add any new fields or properties
                    influencing equality comparison.
                </para>
            </summary>
            <typeparam name="T">
                The type of an encapsulated value.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.EquatableValueCapsule`1">
            <summary>
                <para>
                    Represents the abstract immutable container that encapsulates a strongly-typed value and supports
                    comparison for equality.
                </para>
                <para>
                    <b>IMPORTANT</b> note for inheritors: a derived class MUST NOT add any new fields or properties
                    influencing equality comparison.
                </para>
            </summary>
            <typeparam name="T">
                The type of an encapsulated value.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.ValueCapsule`1">
            <summary>
                Represents the abstract immutable container that encapsulates a strongly-typed value.
            </summary>
            <typeparam name="T">
                The type of an encapsulated value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.ValueCapsule`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ValueCapsule`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
        </member>
        <member name="P:Omnifactotum.ValueCapsule`1.Value">
            <summary>
                Gets the contained value.
            </summary>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.op_Equality(Omnifactotum.EquatableValueCapsule{`0},Omnifactotum.EquatableValueCapsule{`0})">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instances are equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instances are equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.op_Inequality(Omnifactotum.EquatableValueCapsule{`0},Omnifactotum.EquatableValueCapsule{`0})">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instances are not equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.EquatableValueCapsule`1"/> instances are not equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.EquatableValueCapsule`1"/>.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.EquatableValueCapsule`1"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.GetHashCode">
            <summary>
                Returns a hash code for this <see cref="T:Omnifactotum.EquatableValueCapsule`1"/>.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like
                a hash table.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.Equals(Omnifactotum.EquatableValueCapsule{`0})">
            <summary>
                Determines whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
            </param>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other"/> parameter;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.EquatableValueCapsule`1.GetValueEqualityComparer">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used for comparing contained values for equality.
                Default implementation returns the default equality comparer for the type <typeparamref name="T"/>.
            </summary>
            <returns>
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used for comparing contained values for equality.
            </returns>
        </member>
        <member name="P:Omnifactotum.EquatableValueCapsule`1.ValueEqualityComparer">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used for comparing contained values for equality.
            </summary>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.op_LessThan(Omnifactotum.ComparableValueCapsule{`0},Omnifactotum.ComparableValueCapsule{`0})">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is less than
                the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is less than
                the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.op_LessThanOrEqual(Omnifactotum.ComparableValueCapsule{`0},Omnifactotum.ComparableValueCapsule{`0})">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is less than or equal
                to the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is less than or equal to
                the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.op_GreaterThan(Omnifactotum.ComparableValueCapsule{`0},Omnifactotum.ComparableValueCapsule{`0})">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is greater than
                the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is greater than
                the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.op_GreaterThanOrEqual(Omnifactotum.ComparableValueCapsule{`0},Omnifactotum.ComparableValueCapsule{`0})">
            <summary>
                Determines whether the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is greater than or equal
                to the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the left <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance is greater than or equal to
                the right <see cref="T:Omnifactotum.ComparableValueCapsule`1"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.CompareTo(Omnifactotum.ComparableValueCapsule{`0})">
            <summary>
                Compares the current object with another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
                </param>
            <returns>
                A value that indicates the relative order of the objects being compared.
                See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                The <paramref name="other"/> object's type differs from this instance's type.
            </exception>
        </member>
        <member name="M:Omnifactotum.ComparableValueCapsule`1.GetValueComparer">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> used for comparing contained values.
                Default implementation returns the default comparer for the type <typeparamref name="T"/>.
            </summary>
            <returns>
                The <see cref="T:System.Collections.Generic.IComparer`1"/> used for comparing contained values.
            </returns>
        </member>
        <member name="P:Omnifactotum.ComparableValueCapsule`1.ValueComparer">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> used for comparing contained values.
            </summary>
        </member>
        <member name="T:Omnifactotum.ValueContainer">
            <summary>
                Provides helper functionality for creating instances of the <see cref="T:Omnifactotum.ValueContainer`1"/> type
                using the type inference in a friendly way.
            </summary>
        </member>
        <member name="M:Omnifactotum.ValueContainer.Create``1(``0)">
            <summary>
                Creates and initializes a new instance of the <see cref="T:Omnifactotum.ValueContainer`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
            <returns>
                A created and initialized instance of the <see cref="T:Omnifactotum.ValueContainer`1"/> class.
            </returns>
        </member>
        <member name="T:Omnifactotum.EnumFixedSizeDictionary`2">
            <summary>
                Represents a generic dictionary which is internally handled by a fixed size array due to limitation for
                the maximum number of possible keys, and whose keys are enumeration values.
            </summary>
            <typeparam name="TKey">
                The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of the values in the dictionary.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.FixedSizeDictionary`3">
            <summary>
                Represents a generic dictionary which is internally handled by a fixed size array due to limitation for
                the maximum number of possible keys.
            </summary>
            <typeparam name="TKey">
                The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of the values in the dictionary.
            </typeparam>
            <typeparam name="TDeterminant">
                The type of the determinant. See <see cref="T:Omnifactotum.FixedSizeDictionaryDeterminant`1"/>.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> class
                by copying the key/values pairs from the specified dictionary.
            </summary>
            <param name="dictionary">
                The dictionary to copy the key/values pairs from.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dictionary"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.#ctor(Omnifactotum.FixedSizeDictionary{`0,`1,`2})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> class
                by copying the key/values pairs from the specified dictionary.
            </summary>
            <param name="dictionary">
                The dictionary to copy the key/values pairs from.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dictionary"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.Add(`0,`1)">
            <summary>
                Adds an element with the specified key and value to
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
            <param name="key">
                The object to use as the key of the element to add.
            </param>
            <param name="value">
                The object to use as the value of the element to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                An element with the same key already exists in
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </exception>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.ContainsKey(`0)">
            <summary>
                Determines whether the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> contains
                an element with the specified key.
            </summary>
            <param name="key">
                The key to locate in the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> contains an element
                with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.Remove(`0)">
            <summary>
                Removes the element with the specified key from
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
            <param name="key">
                The key of the element to remove.
            </param>
            <returns>
                <c>true</c> if the element is successfully removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.TryGetValue(`0,`1@)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">
                The key whose value to get.
            </param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the key is found;
                otherwise, the default value for the type of the <paramref name="value"/> parameter.
                This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> contains an element
                with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
                The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.Clear">
            <summary>
                Removes all items from the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains the specified value.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>,
                starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available
                space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
                The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionary`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>..
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Omnifactotum.FixedSizeDictionary`3.Keys">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
        </member>
        <member name="P:Omnifactotum.FixedSizeDictionary`3.Values">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
        </member>
        <member name="P:Omnifactotum.FixedSizeDictionary`3.Item(`0)">
            <summary>
                Gets or sets the element with the specified key.
            </summary>
            <param name="key">
                The key of the element to get or set.
            </param>
            <returns>
                The element with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                An element with the specified key was not found.
            </exception>
        </member>
        <member name="P:Omnifactotum.FixedSizeDictionary`3.Count">
            <summary>
                Gets the number of elements contained in
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
        </member>
        <member name="P:Omnifactotum.FixedSizeDictionary`3.IsReadOnly">
            <summary>
                Gets a value indicating whether
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> is read-only.
            </summary>
        </member>
        <member name="T:Omnifactotum.FixedSizeDictionaryDeterminant`1">
            <summary>
                Specifies the size of a <see cref="T:Omnifactotum.FixedSizeDictionary`3"/> as well as mapping
                of between keys and internal indexes.
            </summary>
            <typeparam name="TKey">
                The type of the key in the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionaryDeterminant`1.GetIndex(`0)">
            <summary>
                Gets the internal index corresponding to the specified key.
            </summary>
            <param name="key">
                The key to get the index of.
            </param>
            <returns>
                The internal index corresponding to the specified key.
            </returns>
        </member>
        <member name="M:Omnifactotum.FixedSizeDictionaryDeterminant`1.GetKey(System.Int32)">
            <summary>
                Gets the key corresponding to the specified internal index.
            </summary>
            <param name="index">
                The index to get the key for.
            </param>
            <returns>
                The key corresponding to the specified internal index.
            </returns>
        </member>
        <member name="P:Omnifactotum.FixedSizeDictionaryDeterminant`1.Size">
            <summary>
                Gets the constant size of an internal array used in
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.EnumFixedSizeDictionary`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.EnumFixedSizeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.EnumFixedSizeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.EnumFixedSizeDictionary`2"/> class
                by copying the key/values pairs from the specified dictionary.
            </summary>
            <param name="dictionary">
                The dictionary to copy the key/values pairs from.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dictionary"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.EnumFixedSizeDictionary`2.#ctor(Omnifactotum.FixedSizeDictionary{`0,`1,Omnifactotum.EnumFixedSizeDictionaryDeterminant{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.EnumFixedSizeDictionary`2"/> class
                by copying the key/values pairs from the specified dictionary.
            </summary>
            <param name="dictionary">
                The dictionary to copy the key/values pairs from.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dictionary"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Omnifactotum.EnumFixedSizeDictionaryDeterminant`1">
            <summary>
                Represents the determinant for the <see cref="T:Omnifactotum.EnumFixedSizeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.EnumFixedSizeDictionaryDeterminant`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.EnumFixedSizeDictionaryDeterminant`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.EnumFixedSizeDictionaryDeterminant`1.GetIndex(`0)">
            <summary>
                Gets the internal index corresponding to the specified key.
            </summary>
            <param name="key">
                The key to get the index of.
            </param>
            <returns>
                The internal index corresponding to the specified key.
            </returns>
        </member>
        <member name="M:Omnifactotum.EnumFixedSizeDictionaryDeterminant`1.GetKey(System.Int32)">
            <summary>
                Gets the key corresponding to the specified internal index.
            </summary>
            <param name="index">
                The index to get the key for.
            </param>
            <returns>
                The key corresponding to the specified internal index.
            </returns>
        </member>
        <member name="P:Omnifactotum.EnumFixedSizeDictionaryDeterminant`1.Size">
            <summary>
                Gets the constant size of an internal array used in
                the <see cref="T:Omnifactotum.FixedSizeDictionary`3"/>.
            </summary>
        </member>
        <member name="T:System.OmnifactotumMathExtensions">
            <summary>
                Contains math extension methods for the numbers.
            </summary>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.Int32)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.UInt32)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.Int64)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.UInt64)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.Single)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.Double)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqr(System.Decimal)">
            <summary>
                Returns the square of the specified number.
                This method SUPPRESSES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.Int32)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.UInt32)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.Int64)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.UInt64)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.Single)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.Double)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.SqrChecked(System.Decimal)">
            <summary>
                Returns the square of the specified number.
                This method ENFORCES overflow-checking.
            </summary>
            <param name="value">
                The value to compute the square of.
            </param>
            <returns>
                The square of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Sqrt(System.Double)">
            <summary>
                Returns the square root of the specified number.
            </summary>
            <param name="value">
                The value to compute the square root of.
            </param>
            <returns>
                The square root of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.SByte)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.Int16)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.Int32)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.Int64)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.Single)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.Double)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="M:System.OmnifactotumMathExtensions.Abs(System.Decimal)">
            <summary>
                Returns the absolute value of the specified number.
            </summary>
            <param name="value">
                The value to compute the absolute value of.
            </param>
            <returns>
                The absolute value of the specified number.
            </returns>
        </member>
        <member name="T:System.Linq.Expressions.OmnifactotumExpressionExtensions">
            <summary>
                Contains extension methods for the classes in the <c>System.Linq.Expressions</c> namespace.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.OmnifactotumExpressionExtensions.GetLastMethod``1(System.Linq.Expressions.Expression{``0})">
            <summary>
                Gets the last method called in the expression.
            </summary>
            <typeparam name="TDelegate">
                The type of the delegate.
            </typeparam>
            <param name="expression">
                The expression to get the last called method of.
            </param>
            <returns>
                The last called method, or <c>null</c> if the last element in the expression is not a method call.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.OmnifactotumExpressionExtensions.InjectInto``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
                Injects the specified source lambda expression instead of the sole parameter of the target expression.
            </summary>
            <typeparam name="TInput">
                The type of the sole input parameter of the source lambda expression.
            </typeparam>
            <typeparam name="TIntermediate">
                The type of the result of the source lambda expression
                (as well as the type of the sole input parameter of the target lambda expression).
            </typeparam>
            <typeparam name="TResult">
                The type of the result of the target lambda expression.
            </typeparam>
            <param name="sourceExpression">
                The lambda expression to inject into the target lambda expression.
            </param>
            <param name="targetExpression">
                The lambda expression to inject the source lambda expression into.
            </param>
            <returns>
                A new lambda expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.OmnifactotumExpressionExtensions.InjectInto(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                Injects the specified source lambda expression instead of the sole parameter of the target expression.
            </summary>
            <param name="sourceExpression">
                The lambda expression to inject into the target lambda expression.
            </param>
            <param name="targetExpression">
                The lambda expression to inject the source lambda expression into.
            </param>
            <returns>
                A new lambda expression.
            </returns>
        </member>
        <member name="T:System.Linq.Expressions.OmnifactotumExpressionExtensions.ReplaceExpressionVisitor">
            <summary>
                Represents the expression visitor that replaces one expression to another.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.OmnifactotumExpressionExtensions.ReplaceExpressionVisitor.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Linq.Expressions.OmnifactotumExpressionExtensions.ReplaceExpressionVisitor"/> class.
            </summary>
            <param name="sourceExpression">
                The expression to replace with the target expression.
            </param>
            <param name="targetExpression">
                The expression to replace the source expression with.
            </param>
        </member>
        <member name="M:System.Linq.Expressions.OmnifactotumExpressionExtensions.ReplaceExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                Dispatches the expression to one of the more specialized visit methods in this class.
            </summary>
            <param name="node">
                The expression to visit.
            </param>
            <returns>
                The modified expression, if it or any subexpression was modified;
                otherwise, returns the original expression.
            </returns>
        </member>
        <member name="T:Omnifactotum.Factotum">
            <summary>
                Provides helper methods for common use.
            </summary>
        </member>
        <member name="F:Omnifactotum.Factotum.MinimumGeneratedIdPartSize">
            <summary>
                The minimum size of a generated identifier part (see <see cref="M:Omnifactotum.Factotum.GenerateId(System.Int32,Omnifactotum.IdGenerationModes)"/> and
                <see cref="T:Omnifactotum.IdGenerationModes"/>).
            </summary>
        </member>
        <member name="F:Omnifactotum.Factotum.PointerStringFormat">
            <summary>
                The pointer string format.
            </summary>
        </member>
        <member name="M:Omnifactotum.Factotum.DisposeAndNull``1(``0@)">
            <summary>
                <para>
                    Calls the <see cref="M:System.IDisposable.Dispose"/> method of the specified reference type instance,
                    passed by reference, implementing the <see cref="T:System.IDisposable"/> interface and
                    sets the reference to this object to <c>null</c>.
                </para>
                <para>
                    If the specified instance is already <c>null</c>, nothing is done.
                </para>
                <para>
                    If the <see cref="M:System.IDisposable.Dispose"/> method implementation throws an exception,
                    the reference to the instance remains unchanged.
                </para>
            </summary>
            <typeparam name="T">
                The type of the disposable instance.
            </typeparam>
            <param name="disposable">
                A reference to an object to dispose and set to <c>null</c>.
            </param>
        </member>
        <member name="M:Omnifactotum.Factotum.DisposeAndNull``1(System.Nullable{``0}@)">
            <summary>
                <para>
                    Calls the <see cref="M:System.IDisposable.Dispose"/> method of the specified nullable instance,
                    passed by reference, implementing the <see cref="T:System.IDisposable"/> interface and
                    sets the reference to this object to <c>null</c>.
                </para>
                <para>
                    If the specified instance is already <c>null</c> (that is, <see cref="P:System.Nullable`1.HasValue"/> is
                    <c>false</c>), nothing is done.
                </para>
                <para>
                    If the <see cref="M:System.IDisposable.Dispose"/> method implementation throws an exception,
                    the reference to the instance remains unchanged.
                </para>
            </summary>
            <typeparam name="T">
                The type of the disposable instance.
            </typeparam>
            <param name="disposable">
                A reference to an object to dispose and set to <c>null</c>.
            </param>
        </member>
        <member name="M:Omnifactotum.Factotum.Exchange``1(``0@,``0@)">
            <summary>
                Exchanges two specified values, passed by reference. This method is not thread-safe.
            </summary>
            <typeparam name="T">
                The type of the values to exchange.
            </typeparam>
            <param name="value1">
                The first value to exchange with the second value.
            </param>
            <param name="value2">
                The second value to exchange with the first value.
            </param>
        </member>
        <member name="M:Omnifactotum.Factotum.Identity``1(``0)">
            <summary>
                Represents an identity function which returns the instance passed as an argument.
                The intended usage is instead of identity lambda expression similar to <c>obj => obj</c>.
            </summary>
            <typeparam name="T">
                The type of the instance to receive and return.
            </typeparam>
            <param name="obj">
                The instance to return.
            </param>
            <returns>
                The instance passed as an argument.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.SetDefaultValues``1(``0)">
            <summary>
                Sets the values of the public instance properties of the specified object to the values indicated
                in the <see cref="T:System.ComponentModel.DefaultValueAttribute">DefaultValue</see> attribute which a property is marked with.
                If a property is not marked with the <see cref="T:System.ComponentModel.DefaultValueAttribute">DefaultValue</see> attribute,
                its value remains unchanged.
            </summary>
            <typeparam name="T">
                The type of the object whose properties to change.
            </typeparam>
            <param name="obj">
                The object whose properties to change.
            </param>
            <returns>
                The input object.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.ToPropertyString``1(``0,Omnifactotum.ToPropertyStringOptions)">
            <summary>
                Gets a string representing the properties of the specified object.
            </summary>
            <typeparam name="T">
                The type of the object to convert.
            </typeparam>
            <param name="obj">
                The object to convert.
            </param>
            <param name="options">
                The options specifying how to build the string representation.
            </param>
            <returns>
                A string representing the properties of the specified object.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.AreEqualByContents``1(``0,``0)">
            <summary>
                Determines if the contents of the two specified objects are equal, that is, if the objects are of
                the same type and the values of all their corresponding instance fields are equal.
            </summary>
            <remarks>
                This method uses reflection to obtain the list of fields for comparison.
                This method recursively processes the composite objects, if any.
            </remarks>
            <typeparam name="T">
                The type of the objects to compare.
            </typeparam>
            <param name="valueA">
                The first object to compare.
            </param>
            <param name="valueB">
                The second object to compare.
            </param>
            <returns>
                <c>true</c> if the contents of the two specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.Max``1(``0,``0)">
            <summary>
                Compares the two specified values and returns the larger of those.
            </summary>
            <typeparam name="T">
                The type of values to compare.
            </typeparam>
            <param name="x">
                The first value to compare.
            </param>
            <param name="y">
                The second value to compare.
            </param>
            <returns>
                The larger of the two specified values.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.Min``1(``0,``0)">
            <summary>
                Compares the two specified values and returns the smaller of those.
            </summary>
            <typeparam name="T">
                The type of values to compare.
            </typeparam>
            <param name="x">
                The first value to compare.
            </param>
            <param name="y">
                The second value to compare.
            </param>
            <returns>
                The smaller of the two specified values.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GenerateId(System.Int32,Omnifactotum.IdGenerationModes)">
            <summary>
                Generates an identifier which is unique, cryptographically random, or both.
            </summary>
            <param name="size">
                <para>The size, in bytes, of the resulting identifier.</para>
                <para>
                    This value must be at least <see cref="F:Omnifactotum.Factotum.MinimumGeneratedIdPartSize"/> when either
                    <see cref="F:Omnifactotum.IdGenerationModes.Unique"/> or <see cref="F:Omnifactotum.IdGenerationModes.Random"/> is solely
                    specified, and it must be at least twice as <see cref="F:Omnifactotum.Factotum.MinimumGeneratedIdPartSize"/> if
                    both modes are specified.
                </para>
            </param>
            <param name="modes">
                Specifies the modes of identifier generation.
            </param>
            <returns>
                An array of bytes representing the generated identifier.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="size"/> is less than required by the specified <paramref name="modes"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="modes"/> does not specify anything to generate.
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.GenerateIdString(System.Int32,Omnifactotum.IdGenerationModes)">
            <summary>
                Generates an identifier, which is unique, cryptographically random, or both, and returns its
                hexadecimal representation.
            </summary>
            <param name="size">
                <para>The size, in bytes, of the resulting identifier.</para>
                <para>
                    This value must be at least <see cref="F:Omnifactotum.Factotum.MinimumGeneratedIdPartSize"/> when either
                    <see cref="F:Omnifactotum.IdGenerationModes.Unique"/> or <see cref="F:Omnifactotum.IdGenerationModes.Random"/> is solely
                    specified, and it must be at least twice as <see cref="F:Omnifactotum.Factotum.MinimumGeneratedIdPartSize"/> if
                    both modes are specified.
                </para>
            </param>
            <param name="modes">
                Specifies the modes of identifier generation.
            </param>
            <returns>
                A hexadecimal representation of the generated identifier.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="size"/> is less than required by the specified <paramref name="modes"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="modes"/> does not specify anything to generate.
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.GetExecutableLocalPath">
            <summary>
                <para>Gets the local path of the process executable.</para>
                <para><b>NOTE</b>: The entry assembly is used to determine the executable path.
                If the entry assembly is not available, the calling assembly is used.</para>
            </summary>
            <returns>
                The local path of the process executable.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The entry assembly (or the calling assembly) does not have a local path.
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.GetExecutableDirectory">
            <summary>
                <para>Gets the directory of the process executable.</para>
                <para><b>NOTE</b>: The entry assembly is used to determine the executable directory.
                If the entry assembly is not available, the calling assembly is used.</para>
            </summary>
            <returns>
                The directory of the process executable.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The entry assembly (or the calling assembly) does not have a local path.
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.CreateEmptyCompletedTask">
            <summary>
                Creates a task that does nothing and whose status is <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/>.
            </summary>
            <returns>
                An empty completed task.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.CreateEmptyFaultedTask(System.Exception)">
            <summary>
                Creates a task that does nothing and whose status is <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/>.
            </summary>
            <returns>
                An empty faulted task.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetFieldOrPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the <see cref="T:System.Reflection.MemberInfo"/> of the field or property specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the field or property.
            </typeparam>
            <typeparam name="TMember">
                The type of the field or property.
            </typeparam>
            <param name="memberGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Member</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.MemberInfo"/> containing information about the required field or property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetFieldInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the <see cref="T:System.Reflection.FieldInfo"/> of the field specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the field.
            </typeparam>
            <typeparam name="TField">
                The type of the field.
            </typeparam>
            <param name="fieldGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Field</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.FieldInfo"/> containing information about the required field.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetFieldName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the name of the field specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the field.
            </typeparam>
            <typeparam name="TField">
                The type of the field.
            </typeparam>
            <param name="fieldGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Field</c>.
            </param>
            <returns>
                The name of the field specified by the lambda expression.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetQualifiedFieldName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the type-qualified name of the field specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the field.
            </typeparam>
            <typeparam name="TField">
                The type of the field.
            </typeparam>
            <param name="fieldGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Field</c>.
            </param>
            <returns>
                The name of the field in the following form: <c>SomeType.Field</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the <see cref="T:System.Reflection.PropertyInfo"/> of the property specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the property.
            </typeparam>
            <typeparam name="TProperty">
                The type of the property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Property</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the required property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the name of the property specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the property.
            </typeparam>
            <typeparam name="TProperty">
                The type of the property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Property</c>.
            </param>
            <returns>
                The name of the property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetQualifiedPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the type-qualified name of the property specified by the lambda expression.
            </summary>
            <typeparam name="TObject">
                The type containing the property.
            </typeparam>
            <typeparam name="TProperty">
                The type of the property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>(SomeType x) =&gt; x.Property</c>.
            </param>
            <returns>
                The name of the property in the following form: <c>SomeType.Property</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the <see cref="T:System.Reflection.PropertyInfo"/> of the static property specified by the lambda expression.
            </summary>
            <typeparam name="TProperty">
                The type of the static property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>() =&gt; propertyExpression</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the required static property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the name of the static property specified by the lambda expression.
            </summary>
            <typeparam name="TProperty">
                The type of the static property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>() =&gt; propertyExpression</c>.
            </param>
            <returns>
                The name of the static property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.GetQualifiedPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the type-qualified name of the static property specified by the lambda expression.
            </summary>
            <typeparam name="TProperty">
                The type of the static property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>() =&gt; propertyExpression</c>.
            </param>
            <returns>
                The type-qualified name of the static property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.ProcessRecursively``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,Omnifactotum.RecursiveProcessingDirective},Omnifactotum.RecursiveProcessingContext{``0})">
            <summary>
                Processes the specified instance recursively.
            </summary>
            <typeparam name="T">
                The type of the instances to process.
            </typeparam>
            <param name="instance">
                The instance to process. Can be <c>null</c>.
            </param>
            <param name="getItems">
                A reference to the method that maps <paramref name="instance"/> to the collection of associated objects
                to process them recursively.
            </param>
            <param name="processItem">
                A reference to the method that processes each single item.
            </param>
            <param name="processingContext">
                The context of the recursive processing, or <c>null</c> to use a new context.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="getItems"/> is <c>null</c>.
                </para>
                <para>-or-</para>
                <para>
                    <paramref name="processItem"/> is <c>null</c>.
                </para>
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.ProcessRecursively``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,Omnifactotum.RecursiveProcessingDirective})">
            <summary>
                Processes the specified instance recursively.
            </summary>
            <typeparam name="T">
                The type of the instances to process.
            </typeparam>
            <param name="instance">
                The instance to process. Can be <c>null</c>.
            </param>
            <param name="getItems">
                A reference to the method that maps <paramref name="instance"/> to the collection of associated objects
                to process them recursively.
            </param>
            <param name="processItem">
                A reference to the method that processes each single item.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="getItems"/> is <c>null</c>.
                </para>
                <para>-or-</para>
                <para>
                    <paramref name="processItem"/> is <c>null</c>.
                </para>
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.ProcessRecursively``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},Omnifactotum.RecursiveProcessingContext{``0})">
            <summary>
                Processes the specified instance recursively.
            </summary>
            <typeparam name="T">
                The type of the instances to process.
            </typeparam>
            <param name="instance">
                The instance to process. Can be <c>null</c>.
            </param>
            <param name="getItems">
                A reference to the method that maps <paramref name="instance"/> to the collection of associated objects
                to process them recursively.
            </param>
            <param name="processItem">
                A reference to the method that processes each single item.
            </param>
            <param name="processingContext">
                The context of the recursive processing, or <c>null</c> to use a new context.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="getItems"/> is <c>null</c>.
                </para>
                <para>-or-</para>
                <para>
                    <paramref name="processItem"/> is <c>null</c>.
                </para>
            </exception>
        </member>
        <member name="M:Omnifactotum.Factotum.ProcessRecursively``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
                Processes the specified instance recursively.
            </summary>
            <typeparam name="T">
                The type of the instances to process.
            </typeparam>
            <param name="instance">
                The instance to process. Can be <c>null</c>.
            </param>
            <param name="getItems">
                A reference to the method that maps <paramref name="instance"/> to the collection of associated objects
                to process them recursively.
            </param>
            <param name="processItem">
                A reference to the method that processes each single item.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="getItems"/> is <c>null</c>.
                </para>
                <para>-or-</para>
                <para>
                    <paramref name="processItem"/> is <c>null</c>.
                </para>
            </exception>
        </member>
        <member name="T:Omnifactotum.Factotum.For`1">
            <summary>
                Provides a convenient access to helper methods for the specified type.
            </summary>
            <typeparam name="TObject">
                The type that the helper methods are provided for.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetFieldOrPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the <see cref="T:System.Reflection.MemberInfo"/> of the field or property specified by the lambda expression.
            </summary>
            <typeparam name="TMember">
                The type of the field or property.
            </typeparam>
            <param name="memberGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Member</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.MemberInfo"/> containing information about the required field or property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetFieldInfo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the <see cref="T:System.Reflection.FieldInfo"/> of the field specified by the lambda expression.
            </summary>
            <typeparam name="TField">
                The type of the field.
            </typeparam>
            <param name="fieldGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Field</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.FieldInfo"/> containing information about the required field.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetFieldName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the name of the field specified by the lambda expression.
            </summary>
            <typeparam name="TField">
                The type of the field.
            </typeparam>
            <param name="fieldGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Field</c>.
            </param>
            <returns>
                The name of the field specified by the lambda expression.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetQualifiedFieldName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the type-qualified name of the field specified by the lambda expression.
            </summary>
            <typeparam name="TField">
                The type of the field.
            </typeparam>
            <param name="fieldGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Field</c>.
            </param>
            <returns>
                The name of the field in the following form: <c>SomeType.Field</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the <see cref="T:System.Reflection.PropertyInfo"/> of the property specified by the lambda expression.
            </summary>
            <typeparam name="TProperty">
                The type of the property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Property</c>.
            </param>
            <returns>
                The <see cref="T:System.Reflection.PropertyInfo"/> containing information about the required property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the name of the property specified by the lambda expression.
            </summary>
            <typeparam name="TProperty">
                The type of the property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Property</c>.
            </param>
            <returns>
                The name of the property.
            </returns>
        </member>
        <member name="M:Omnifactotum.Factotum.For`1.GetQualifiedPropertyName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the type-qualified name of the property specified by the lambda expression.
            </summary>
            <typeparam name="TProperty">
                The type of the property.
            </typeparam>
            <param name="propertyGetterExpression">
                The lambda expression in the following form: <c>x =&gt; x.Property</c>.
            </param>
            <returns>
                The name of the property in the following form: <c>SomeType.Property</c>.
            </returns>
        </member>
        <member name="T:Omnifactotum.IValueContainer`1">
            <summary>
                Represents the interface of a mutable container that encapsulates a strongly-typed value.
            </summary>
            <typeparam name="T">
                The type of an encapsulated value.
            </typeparam>
        </member>
        <member name="P:Omnifactotum.IValueContainer`1.Value">
            <summary>
                Gets or sets the encapsulated value.
            </summary>
        </member>
        <member name="T:Omnifactotum.KeyedEqualityComparer">
            <summary>
                Provides helper functionality for creating instances of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/>
                class using the type inference in a friendly way.
            </summary>
        </member>
        <member name="T:Omnifactotum.KeyedEqualityComparer.For`1">
            <summary>
                Provides methods for creating instances of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/> class
                for the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
                The type to create <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/> instances for.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer.For`1.Create``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates and initializes a new instance of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/>
                class with the specified key selector and key equality comparer.
            </summary>
            <param name="keySelector">
                A reference to a method that provides a key for an object being compared.
            </param>
            <param name="keyComparer">
                The equality comparer to use when comparing objects' keys; or <c>null</c> to use the default
                equality comparer for type <typeparamref name="TKey"/>.
            </param>
            <returns>
                A created and initialized instance of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer.For`1.Create``1(System.Func{`0,``0})">
            <summary>
                Creates and initializes a new instance of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/>
                class with the specified key selector and default key equality comparer.
            </summary>
            <param name="keySelector">
                A reference to a method that provides a key for an object being compared.
            </param>
            <returns>
                A created and initialized instance of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="T:Omnifactotum.RecursiveProcessingContext`1">
            <summary>
                Represents the context of the recursive processing.
            </summary>
            <typeparam name="T">
                The types of the instances being processed recursively.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.RecursiveProcessingContext`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.RecursiveProcessingContext`1"/> class
                using the specified equality comparer for the instances being processed recursively.
            </summary>
            <param name="equalityComparer">
                The equality comparer to use for eliminating duplicated instances,
                or <c>null</c> to use <see cref="T:Omnifactotum.ByReferenceEqualityComparer`1"/>.
            </param>
        </member>
        <member name="M:Omnifactotum.RecursiveProcessingContext`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.RecursiveProcessingContext`1"/> class
                using the by-reference equality comparer for the instances being processed recursively.
            </summary>
            <seealso cref="T:Omnifactotum.ByReferenceEqualityComparer`1"/>
        </member>
        <member name="T:Omnifactotum.SyncValueContainer">
            <summary>
                Provides helper functionality for creating instances of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> type
                using the type inference in a friendly way.
            </summary>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer.Create``1(``0,System.Object)">
            <summary>
                Creates and initializes a new instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class
                using the specified value and synchronization object.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
            <param name="syncObject">
                The synchronization object used for thread-safe access.
                Cannot be <c>null</c> and must be of a reference type.
            </param>
            <returns>
                A created and initialized instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class.
            </returns>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer.Create``1(``0)">
            <summary>
                Creates and initializes a new instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
            <returns>
                A created and initialized instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class.
            </returns>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute">
            <summary>
                The base class for member constraint attributes.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.BaseValidatableMemberAttribute">
            <summary>
                The base class for attributes annotating validatable members.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.BaseValidatableMemberAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.BaseValidatableMemberAttribute"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute"/> class.
            </summary>
            <param name="constraintType">
                The type, implementing the <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> interface, used to validate
                the member annotated with this <see cref="T:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute"/> attribute. The type must
                have parameterless constructor.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute"/>.
            </returns>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute.ConstraintType">
            <summary>
                Gets the type, implementing the <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> interface, used to validate
                the member annotated with this <see cref="T:Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.KeyValuePairConstraintBase`2">
            <summary>
                Represents a base constraint for validating <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.TypedMemberConstraintBase`1">
            <summary>
                <para>
                    Represents the basic strongly-typed implementation of the <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> interface.
                </para>
                <para><b>NOTE to implementers</b>: implementation has to be stateless.</para>
            </summary>
            <typeparam name="T">
                The type of the value to validate.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.MemberConstraintBase">
            <summary>
                <para>Represents the basic implementation of the <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> interface.</para>
                <para><b>NOTE to implementers</b>: implementation has to be stateless.</para>
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.IMemberConstraint">
            <summary>
                <para>
                    Represents a constraint for a type member (that is, for a field or a property).
                </para>
                <para>
                    <b>NOTES</b>:
                    <list type="bullet">
                        <item>
                            Implementation must be stateless in order to be reusable during validation.
                        </item>
                        <item>
                            Implementation must have public parameterless constructor.
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.IMemberConstraint.Validate(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.Object)">
            <summary>
                Validates the specified value in scope of the specified context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of validation.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintBase.Validate(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.Object)">
            <summary>
                Validates the specified value in scope of the specified memberContext.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of the validated member.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintBase.ValidateValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.Object)">
            <summary>
                Validates the specified value is scope of the specified memberContext.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of the validated member.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintBase.CastTo``1(System.Object)">
            <summary>
                Tries to cast the specified value to the specified target type and
                if the value is not compatible with the target type, throws an exception with the detailed description.
            </summary>
            <typeparam name="TTarget">
                The type to cast to.
            </typeparam>
            <param name="value">
                The value to cast.
            </param>
            <returns>
                The value cast to the specified target type.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintBase.AddError(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.String)">
            <summary>
                Creates a new <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationError"/> instance using the specified member context
                and failure message and then adds the created error to the validator context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of the validated member to create an error for.
            </param>
            <param name="failureMessage">
                The message describing the validation error.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintBase.AddDefaultError(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext)">
            <summary>
                Creates a new <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationError"/> instance using the specified member context
                and default failure message and then adds the created error to the validator context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of the validated member to create an error for.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.TypedMemberConstraintBase`1.ValidateValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.Object)">
            <summary>
                Validates the specified value is scope of the specified memberContext.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of the validated member.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.TypedMemberConstraintBase`1.ValidateTypedValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,`0)">
            <summary>
                Validates the specified strongly-typed value is scope of the specified memberContext.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of the validated member.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.TypedMemberConstraintBase`1.CreateMemberContext``1(Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Creates a new <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext"/> for the member specified
                by the lambda expression.
            </summary>
            <typeparam name="TMember">
                The type of the member.
            </typeparam>
            <param name="valueContext">
                The parent memberContext.
            </param>
            <param name="value">
                The value which member is accessed.
            </param>
            <param name="memberGetterExpression">
                The member getter lambda expression.
            </param>
            <returns>
                A new <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext"/> for the member specified
                by the lambda expression.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.TypedMemberConstraintBase`1.ValidateMember``1(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,`0,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Type)">
            <summary>
                Validates the member specified by the specified lambda expression.
            </summary>
            <typeparam name="TMember">
                The type of the member.
            </typeparam>
            <param name="validatorContext">
                The object validator memberContext.
            </param>
            <param name="valueContext">
                The memberContext of the value.
            </param>
            <param name="value">
                The value containing the member.
            </param>
            <param name="memberGetterExpression">
                The member getter lambda expression.
            </param>
            <param name="constraintType">
                The type of the constraint.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.KeyValuePairConstraintBase`2.#ctor(System.Type,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.KeyValuePairConstraintBase`2"/> class.
            </summary>
            <param name="keyConstraintType">
                The type specifying the key constraint.
            </param>
            <param name="valueConstraintType">
                The type specifying the value constraint.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.KeyValuePairConstraintBase`2.ValidateTypedValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Validates the specified strongly-typed value is scope of the specified context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of validation.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.KeyValuePairConstraintBase`2.KeyConstraintType">
            <summary>
                Gets the type specifying the key constraint.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.KeyValuePairConstraintBase`2.ValueConstraintType">
            <summary>
                Gets the type specifying the value constraint.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.NotNullConstraint`1">
            <summary>
                Specifies that the annotated member should not be <c>null</c>.
            </summary>
            <typeparam name="T">
                The type of the value to validate.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.NotNullConstraint`1.ValidateTypedValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,`0)">
            <summary>
                Validates the specified strongly-typed value is scope of the specified context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of validation.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.IgnoredConstraint`1">
            <summary>
                Represents the strongly-typed constraint that ignores validation.
            </summary>
            <typeparam name="T">
                The type of the value to validate.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.IgnoredConstraint`1.ValidateTypedValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,`0)">
            <summary>
                Validates the specified strongly-typed value is scope of the specified context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of validation.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.KeyValuePairConstraint`4">
            <summary>
                Represents the constraint for validating <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <typeparam name="TKeyConstraint">
                The type specifying the key constraint.
            </typeparam>
            <typeparam name="TValueConstraint">
                The type specifying the value constraint.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.KeyValuePairConstraint`4.#ctor">
            <summary>
                Initializes a new instance of
                the <see cref="T:Omnifactotum.Validation.Constraints.KeyValuePairConstraint`4"/> class.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.MemberItemConstraintAttribute">
            <summary>
                Specifies how the annotated member item is validated.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberItemConstraintAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.MemberItemConstraintAttribute"/> class.
            </summary>
            <param name="constraintType">
                The type, implementing the <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> interface, used to validate
                the member annotated with this <see cref="T:Omnifactotum.Validation.Constraints.MemberItemConstraintAttribute"/> attribute. The type must
                have parameterless constructor.
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.NotNullOrWhiteSpaceStringConstraint">
            <summary>
                Specifies that the annotated member of type <see cref="T:System.String"/> should not be <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.NotNullOrWhiteSpaceStringConstraint.ValidateTypedValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.String)">
            <summary>
                Validates the specified strongly-typed value is scope of the specified context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of validation.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.NotNullOrEmptyStringConstraint">
            <summary>
                Specifies that the annotated member of type <see cref="T:System.String"/> should not be <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.NotNullOrEmptyStringConstraint.ValidateTypedValue(Omnifactotum.Validation.ObjectValidatorContext,Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.String)">
            <summary>
                Validates the specified strongly-typed value is scope of the specified context.
            </summary>
            <param name="validatorContext">
                The context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </param>
            <param name="memberContext">
                The context of validation.
            </param>
            <param name="value">
                The value to validate.
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.MemberConstraintAttribute">
            <summary>
                Specifies how the annotated member is validated.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintAttribute"/> class.
            </summary>
            <param name="constraintType">
                The type, implementing the <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> interface, used to validate
                the member annotated with this <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintAttribute"/> attribute. The type must
                have parameterless constructor.
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext">
            <summary>
                Represents the context of member constraint validation.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.#ctor(System.Object,System.Object,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext"/> class.
            </summary>
            <param name="root">
                The root object that is being, or was, validated.
            </param>
            <param name="container">
                The object containing the value that is being, or was, validated.
            </param>
            <param name="expression">
                The expression describing the path to the value starting from the root object.
            </param>
            <param name="rootParameterExpression">
                The root parameter expression.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.CreateLambdaExpression(System.String,System.Linq.Expressions.ParameterExpression@)">
            <summary>
                Creates a lambda expression, using the specified parameter name, based on the expression describing
                the path to the value from the root object.
            </summary>
            <param name="parameterName">
                The name of the parameter to use in the lambda expression.
            </param>
            <param name="parameterExpression">
                When this method returns, contains the parameter expression used in the created lambda expression.
            </param>
            <returns>
                A lambda expression based on the expression describing the path to the value from the root object.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.CreateLambdaExpression(System.String)">
            <summary>
                Creates a lambda expression, using the specified parameter name, based on the expression describing
                the path to the value from the root object.
            </summary>
            <param name="parameterName">
                The name of the parameter to use in the lambda expression.
            </param>
            <returns>
                A lambda expression based on the expression describing the path to the value from the root object.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.CreateLambdaExpression(System.Linq.Expressions.ParameterExpression@)">
            <summary>
                Creates a lambda expression, using the default parameter name, based on the expression describing
                the path to the value from the root object.
            </summary>
            <param name="parameterExpression">
                When this method returns, contains the parameter expression used in the created lambda expression.
            </param>
            <returns>
                A lambda expression based on the expression describing the path to the value from the root object.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.CreateLambdaExpression">
            <summary>
                Creates a lambda expression, using the default parameter name, based on the expression describing
                the path to the value from the root object.
            </summary>
            <returns>
                A lambda expression based on the expression describing the path to the value from the root object.
            </returns>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.Root">
            <summary>
                Gets the root object that is being, or was, checked.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.Container">
            <summary>
                Gets the object containing the value that is being, or was, validated.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.Expression">
            <summary>
                Gets the expression describing the path to the value from the root object.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.LambdaExpression">
            <summary>
                Gets the lambda expression describing the path to the value from the root object.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationContext.RootParameterExpression">
            <summary>
                Gets the root parameter expression.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationError">
            <summary>
                Represents the member constraint validation error.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.#ctor(Omnifactotum.Validation.Constraints.MemberConstraintValidationContext,System.Type,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationError"/> class.
            </summary>
            <param name="context">
                The context of validation.
            </param>
            <param name="failedConstraintType">
                The type of the constraint that the value failed against.
            </param>
            <param name="errorMessage">
                The error message.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.GetDefaultDescription(Omnifactotum.Validation.Constraints.MemberConstraintValidationError)">
            <summary>
                Gets the default description of the specified validation error.
            </summary>
            <param name="error">
                The validation error to get the default description of.
            </param>
            <returns>
                The default description of the specified validation error.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents
                this <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationError"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintValidationError"/>.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.GetDefaultDescription">
            <summary>
                Gets the default description of the current validation error.
            </summary>
            <returns>
                The default description of the current validation error.
            </returns>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.Context">
            <summary>
                Gets the context of validation.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.FailedConstraintType">
            <summary>
                Gets the type of the constraint that the value failed against.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.ErrorMessage">
            <summary>
                Gets the error message.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.NotNullConstraint">
            <summary>
                Specifies that the annotated member should not be <c>null</c>.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.Constraints.ValidatableMemberAttribute">
            <summary>
                Specifies that the content of annotated member is validated.
                Used for members that do not have constraints applied to them.
            </summary>
        </member>
        <member name="F:Omnifactotum.Validation.InternalMemberDataEqualityComparer.Instance">
            <summary>
                The sole instance of the <see cref="T:Omnifactotum.Validation.InternalMemberDataEqualityComparer"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.InternalMemberDataEqualityComparer.Equals(Omnifactotum.Validation.MemberData,Omnifactotum.Validation.MemberData)">
            <summary>
                Determines whether the specified objects are equal.
            </summary>
            <param name="x">
                The first object of type <see cref="T:Omnifactotum.Validation.MemberData"/> to compare.
            </param>
            <param name="y">
                The second object of type <see cref="T:Omnifactotum.Validation.MemberData"/> to compare.
            </param>
            <returns>
                <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.InternalMemberDataEqualityComparer.GetHashCode(Omnifactotum.Validation.MemberData)">
            <summary>
                Returns a hash code for the specified instance.
            </summary>
            <param name="obj">
                The object to get a hash code for.
            </param>
            <returns>
                A hash code for the specified instance.
            </returns>
        </member>
        <member name="T:Omnifactotum.Validation.MemberData">
            <summary>
                Represents the member data.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.MemberData.#ctor(System.Linq.Expressions.Expression,System.Object,System.Object,Omnifactotum.Validation.Constraints.BaseValidatableMemberAttribute[],Omnifactotum.Validation.Constraints.BaseMemberConstraintAttribute[])">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.MemberData"/> class.
            </summary>
            <param name="expression">
                The expression.
            </param>
            <param name="container">
                The object containing the value that is being validated. Can be <c>null</c>.
            </param>
            <param name="value">
                The member value.
            </param>
            <param name="attributes">
                The constraint attributes.
            </param>
            <param name="effectiveAttributes">
                The effective constraint attributes.
            </param>
        </member>
        <member name="P:Omnifactotum.Validation.MemberData.Expression">
            <summary>
                Gets the expression.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.MemberData.Container">
            <summary>
                Gets the object containing the value that is being, or was, validated.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.MemberData.Value">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.MemberData.Attributes">
            <summary>
                Gets the constraint attributes.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.MemberData.EffectiveAttributes">
            <summary>
                Gets the effective constraint attributes.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.ObjectValidationException">
            <summary>
                Represents the object validation exception.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidationException.#ctor(Omnifactotum.Validation.ObjectValidationResult,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.ObjectValidationException"/> class.
            </summary>
            <param name="validationResult">
                The validation result caused this exception.
            </param>
            <param name="message">
                The message that describes the error.
            </param>
        </member>
        <member name="P:Omnifactotum.Validation.ObjectValidationException.ValidationResult">
            <summary>
                Gets the validation result caused this exception.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.ObjectValidationResult">
            <summary>
                Represents the result of object validation.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidationResult.#ctor(System.Collections.Generic.ICollection{Omnifactotum.Validation.Constraints.MemberConstraintValidationError})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.ObjectValidationResult"/> class.
            </summary>
            <param name="errors">
                The collection of the validation errors found, if any.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidationResult.GetException(System.Func{Omnifactotum.Validation.Constraints.MemberConstraintValidationError,System.String},System.String)">
            <summary>
                <para>Gets the validation exception based on the validation result.</para>
                <para>If validation succeeded, this method returns <c>null</c>.</para>
            </summary>
            <param name="getErrorDescription">
                A reference to a method the retrieves the description for a specified validation error.
            </param>
            <param name="errorDescriptionSeparator">
                The string value that is used to separate a list of validation error descriptions.
                Can be <c>null</c> (in which case an empty string is used).
            </param>
            <returns>
                An <see cref="T:Omnifactotum.Validation.ObjectValidationException"/> if validation failed;
                or <c>null</c> if validation succeeded.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidationResult.GetException">
            <summary>
                <para>
                    Gets the validation exception based on the validation result, using the default description
                    (<see cref="M:Omnifactotum.Validation.Constraints.MemberConstraintValidationError.GetDefaultDescription"/>) and
                    <see cref="P:System.Environment.NewLine"/> separator.
                </para>
                <para>
                    If validation succeeded, this method returns <c>null</c>.
                </para>
            </summary>
            <returns>
                An <see cref="T:Omnifactotum.Validation.ObjectValidationException"/> if validation failed;
                or <c>null</c> if validation succeeded.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidationResult.EnsureSucceeded">
            <summary>
                Checks if validation succeeded and if it is not, throws an <see cref="T:Omnifactotum.Validation.ObjectValidationException"/>.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.ObjectValidationResult.IsObjectValid">
            <summary>
                Gets a value indicating whether the object checked is valid.
            </summary>
        </member>
        <member name="P:Omnifactotum.Validation.ObjectValidationResult.Errors">
            <summary>
                Gets the collection of the validation errors found. Can be empty.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.ObjectValidator">
            <summary>
                Provides functionality to recursively validate objects annotated
                with <see cref="T:Omnifactotum.Validation.Constraints.MemberConstraintAttribute"/>.
            </summary>
        </member>
        <member name="F:Omnifactotum.Validation.ObjectValidator.RootObjectParameterName">
            <summary>
                The root object parameter name (used in expressions).
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidator.Validate``1(``0)">
            <summary>
                Validates the specified instance.
            </summary>
            <typeparam name="T">
                The type of the instance to validate.
            </typeparam>
            <param name="instance">
                The instance to validate.
            </param>
            <returns>
                An <see cref="T:Omnifactotum.Validation.ObjectValidationResult"/> representing the validation result.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidator.Validate``1(``0,Omnifactotum.RecursiveProcessingContext{Omnifactotum.Validation.MemberData})">
            <summary>
                Validates the specified instance.
            </summary>
            <typeparam name="T">
                The type of the instance to validate.
            </typeparam>
            <param name="instance">
                The instance to validate.
            </param>
            <param name="recursiveProcessingContext">
                The context of the recursive processing, or <c>null</c> to use a new context.
            </param>
            <returns>
                An <see cref="T:Omnifactotum.Validation.ObjectValidationResult"/> representing the validation result.
            </returns>
        </member>
        <member name="T:Omnifactotum.Validation.ObjectValidatorContext">
            <summary>
                Represents the context of the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidatorContext.#ctor(Omnifactotum.RecursiveProcessingContext{Omnifactotum.Validation.MemberData})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.ObjectValidatorContext"/> class.
            </summary>
            <param name="recursiveProcessingContext">
                The context of the recursive processing, or <c>null</c> to use a new context.
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidatorContext.ResolveConstraint(System.Type)">
            <summary>
                Resolves the constraint with the specified type.
            </summary>
            <param name="constraintType">
                The type of the constraint to resolve.
            </param>
            <returns>
                An <see cref="T:Omnifactotum.Validation.Constraints.IMemberConstraint"/> instance representing the resolved constraint.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.ObjectValidatorContext.ResolveConstraint``1">
            <summary>
                Resolves the constraint with the specified type.
            </summary>
            <typeparam name="TMemberConstraint">
                The type of the constraint to resolve.
            </typeparam>
            <returns>
                An <typeparamref name="TMemberConstraint"/> instance representing the resolved constraint.
            </returns>
        </member>
        <member name="P:Omnifactotum.Validation.ObjectValidatorContext.Errors">
            <summary>
                Gets the collection of errors.
            </summary>
        </member>
        <member name="T:Omnifactotum.Validation.ValidationErrorCollection">
            <summary>
                Represents the collection of validation errors.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationErrorCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.Validation.ValidationErrorCollection"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationErrorCollection.Add(Omnifactotum.Validation.Constraints.MemberConstraintValidationError)">
            <summary>
                Adds the specified error to the collection.
            </summary>
            <param name="error">
                <para>The error.</para>
                <para>Can be <c>null</c>, in which case it is simply not added to the collection.</para>
            </param>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationErrorCollection.AddRange(System.Collections.Generic.IEnumerable{Omnifactotum.Validation.Constraints.MemberConstraintValidationError})">
            <summary>
                Adds the specified error to the collection.
            </summary>
            <param name="errors">
                The collection of errors.
                <para>Can be <c>null</c>, in which case it is simply not added to the collection.</para>
                <para>
                    One or more items in the collection can be <c>null</c>, in which case those items are
                    simply not added to the collection.
                </para>
            </param>
        </member>
        <member name="T:Omnifactotum.Validation.ValidationFactotum">
            <summary>
                Represents the internal helper for the <see cref="T:Omnifactotum.Validation.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationFactotum.ConvertTypeAuto(System.Linq.Expressions.Expression,System.Type)">
            <summary>
                Converts the type of the expression, if needed.
            </summary>
            <param name="expression">
                The expression to convert.
            </param>
            <param name="valueType">
                The type of the value.
            </param>
            <returns>
                An original expression, if conversion was not needed; otherwise, a converted expression.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationFactotum.ConvertTypeAuto(System.Linq.Expressions.Expression,System.Object)">
            <summary>
                Converts the type of the expression, if needed.
            </summary>
            <param name="expression">
                The expression to convert.
            </param>
            <param name="value">
                The value to which type to convert the expression.
            </param>
            <returns>
                An original expression, if conversion was not needed; otherwise, a converted expression.
            </returns>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationFactotum.IsValidMemberConstraintType(System.Type)">
            <summary>
                Determines whether the specified constraint type is a valid member constraint type.
            </summary>
            <param name="constraintType">
                The type of the constraint to check.
            </param>
            <returns>
                <c>true</c> if specified constraint type is a valid member constraint type; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="constraintType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.Validation.ValidationFactotum.EnsureValidMemberConstraintType(System.Type)">
            <summary>
                Ensures that the specified constraint type is a valid member constraint type.
            </summary>
            <param name="constraintType">
                The type of the constraint to check.
            </param>
            <returns>
                The input constraint type, if it is a valid member constraint type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="constraintType"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                The specified constraint type is not a valid member constraint type.
            </exception>
        </member>
        <member name="T:Omnifactotum.SyncValueContainer`1">
            <summary>
                Represents the mutable thread-safe container that encapsulates a strongly-typed value.
            </summary>
            <typeparam name="T">
                The type of an encapsulated value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.#ctor(`0,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class
                using the specified value and synchronization object.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
            <param name="syncObject">
                The synchronization object used for thread-safe access.
                Cannot be <c>null</c> and must be of a reference type.
            </param>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.SyncValueContainer`1"/> class
                using the default value for the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.op_Equality(Omnifactotum.SyncValueContainer{`0},Omnifactotum.SyncValueContainer{`0})">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.SyncValueContainer`1"/> instances are equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.SyncValueContainer`1"/> instances are equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.op_Inequality(Omnifactotum.SyncValueContainer{`0},Omnifactotum.SyncValueContainer{`0})">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.SyncValueContainer`1"/> instances are not equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.SyncValueContainer`1"/> instances are not equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </returns>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object"/> to compare with this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.GetHashCode">
            <summary>
                Returns a hash code for this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </summary>
            <returns>
                A hash code for this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </returns>
        </member>
        <member name="M:Omnifactotum.SyncValueContainer`1.Equals(Omnifactotum.SyncValueContainer{`0})">
            <summary>
                Determines whether the current <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance is equal to another instance
                of the same type.
            </summary>
            <param name="other">
                An object to compare with this <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance.
            </param>
            <returns>
                <c>true</c> if the current <see cref="T:Omnifactotum.SyncValueContainer`1"/> instance is equal to
                the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Omnifactotum.SyncValueContainer`1.SyncObject">
            <summary>
                Gets the synchronization object used for thread-safe access.
            </summary>
        </member>
        <member name="P:Omnifactotum.SyncValueContainer`1.Value">
            <summary>
                Gets or sets the contained value.
            </summary>
        </member>
        <member name="T:Omnifactotum.DirectedGraph`1">
            <summary>
                Represents the directed graph.
            </summary>
            <typeparam name="T">
                The type of values associated with graph nodes.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.DirectedGraphNodeCollectionBase`1">
            <summary>
                The collection of the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> instances.
            </summary>
            <typeparam name="T">
                The type of the node value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraphNodeCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.Add(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Adds an item to this collection.
            </summary>
            <param name="item">
                An item to add to this collection.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.Clear">
            <summary>
                Removes all items from this collection.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.Contains(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Determines whether this collection contains the specified item.
            </summary>
            <param name="item">
                The object to locate in this collection.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> is found in this collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.CopyTo(Omnifactotum.DirectedGraphNode{`0}[],System.Int32)">
            <summary>
                Copies the elements of this collection to an <see cref="T:System.Array"/>,
                starting at a particular array index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
                copied from this collection. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.Remove(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Removes the first occurrence of a specific object from this collection.
            </summary>
            <param name="item">
                The object to remove from this collection.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> was removed from this collection;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.OnItemAdded(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Called right after an item has been added to this collection.
            </summary>
            <param name="item">
                The item that has been added.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollectionBase`1.OnItemRemoved(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Called right after an item has been removed from this collection.
            </summary>
            <param name="item">
                The item that has been removed.
            </param>
        </member>
        <member name="P:Omnifactotum.DirectedGraphNodeCollectionBase`1.Count">
            <summary>
                Gets the number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Omnifactotum.DirectedGraphNodeCollectionBase`1.IsReadOnly">
            <summary>
                Gets a value indicating whether the this collection is read-only.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraph`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.#ctor(System.Collections.Generic.IEnumerable{Omnifactotum.DirectedGraphNode{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraph`1"/> class.
            </summary>
            <param name="nodes">
                The collection of nodes to initialize the <see cref="T:Omnifactotum.DirectedGraph`1"/> with.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.AddNode(`0)">
            <summary>
                Creates a node with the specified value and adds the created node to this graph.
            </summary>
            <param name="nodeValue">
                The value that will be associated with the created and added node.
            </param>
            <returns>
                A created node.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.SortTopologically(System.Comparison{Omnifactotum.DirectedGraphNode{`0}})">
            <summary>
                Gets nodes of this graph sorted topologically, leaving the source graph and its nodes unaffected.
            </summary>
            <param name="compareEquipollentNodes">
                A reference to a method that is called to compare equipollent nodes, or <c>null</c> to sort
                equipollent nodes by their values, using the default comparer for the type <typeparamref name="T"/>.
            </param>
            <returns>
                An array of the nodes sorted topologically.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.SortTopologically">
            <summary>
                Gets the nodes of this graph sorted topologically, remaining the source graph and its nodes unaffected.
                Equipollent nodes are sorted by their values, using the default comparer for
                the type <typeparamref name="T"/>.
            </summary>
            <returns>
                An array of the nodes sorted topologically.
            </returns>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.OnItemRemoved(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Called right after an item has been removed from this collection.
            </summary>
            <param name="item">
                The item that has been removed.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.InternalNode`1.#ctor(Omnifactotum.DirectedGraphNode{`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraph`1.InternalNode`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraph`1.NodeComparer`1.#ctor(System.Comparison{Omnifactotum.DirectedGraphNode{`1}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraph`1.NodeComparer`1"/> class.
            </summary>
        </member>
        <member name="T:Omnifactotum.DirectedGraphNode`1">
            <summary>
                Represents a node in a directed graph.
            </summary>
            <typeparam name="T">
                The type of the value associated with the graph node.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNode`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> class.
            </summary>
            <param name="value">
                The value associated with the graph node.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNode`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> class
                using the default value for the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNode`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.DirectedGraphNode`1"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.DirectedGraphNode`1"/>.
            </returns>
        </member>
        <member name="P:Omnifactotum.DirectedGraphNode`1.Graph">
            <summary>
                Gets the graph which this node belongs to.
            </summary>
        </member>
        <member name="P:Omnifactotum.DirectedGraphNode`1.Value">
            <summary>
                Gets or sets the value associated with this <see cref="T:Omnifactotum.DirectedGraphNode`1"/>.
            </summary>
        </member>
        <member name="P:Omnifactotum.DirectedGraphNode`1.Heads">
            <summary>
                Gets the collection of the heads of this node, that is, the nodes to which this node is directed to.
            </summary>
        </member>
        <member name="P:Omnifactotum.DirectedGraphNode`1.Tails">
            <summary>
                Gets the collection of the tails of this node, that is, the nodes which are directed to this node.
            </summary>
        </member>
        <member name="T:Omnifactotum.DirectedGraphNode">
            <summary>
                Provides helper functionality for creating instances of
                the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> type using type inference in a friendly way.
            </summary>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNode.Create``1(``0)">
            <summary>
                Creates a new instance of the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> class using the specified value.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="value">
                The value to initialize <see cref="T:Omnifactotum.DirectedGraphNode`1"/> with.
            </param>
            <returns>
                A new instance of the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> class.
            </returns>
        </member>
        <member name="T:Omnifactotum.DirectedGraphNodeCollection`1">
            <summary>
                The collection of the <see cref="T:Omnifactotum.DirectedGraphNode`1"/> instances.
            </summary>
            <typeparam name="T">
                The type of the node value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollection`1.#ctor(Omnifactotum.DirectedGraphNode{`0},Omnifactotum.DirectedGraphOwnerRelation)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.DirectedGraphNodeCollection`1"/> class.
            </summary>
            <param name="owner">
                The node containing this collection.
            </param>
            <param name="ownerRelation">
                The relation of the owner node to the items contained in this collection.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollection`1.OnItemAdded(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Called right after an item has been added to this collection.
            </summary>
            <param name="item">
                The item that has been added.
            </param>
        </member>
        <member name="M:Omnifactotum.DirectedGraphNodeCollection`1.OnItemRemoved(Omnifactotum.DirectedGraphNode{`0})">
            <summary>
                Called right after an item has been removed from this collection.
            </summary>
            <param name="item">
                The item that has been removed.
            </param>
        </member>
        <member name="T:Omnifactotum.DirectedGraphOwnerRelation">
            <summary>
                Represents the relation of the owner node to the items contained in the collection.
            </summary>
        </member>
        <member name="F:Omnifactotum.DirectedGraphOwnerRelation.Head">
            <summary>
                The owner is the head node.
            </summary>
        </member>
        <member name="F:Omnifactotum.DirectedGraphOwnerRelation.Tail">
            <summary>
                The owner is the tail node.
            </summary>
        </member>
        <member name="T:Omnifactotum.EnumFactotum">
            <summary>
                Provides utility methods for enumerations.
            </summary>
        </member>
        <member name="M:Omnifactotum.EnumFactotum.GetValue``1(System.String,System.Boolean)">
            <summary>
                Gets the value of the enumeration of the specified type
                by the string representation of an enumeration value.
            </summary>
            <typeparam name="TEnum">
                The system type of the enumeration.
            </typeparam>
            <param name="enumValueName">
                The string representation of an enumeration value.
            </param>
            <param name="ignoreCase">
                A <see cref="T:System.Boolean"/> value that indicates whether to ignore the letter case.
            </param>
            <returns>
                A strongly-typed value of the enumeration.
            </returns>
        </member>
        <member name="M:Omnifactotum.EnumFactotum.GetValue``1(System.String)">
            <summary>
                Gets the value of the enumeration of the specified type by the string representation of
                an enumeration value. This method is case-sensitive.
            </summary>
            <typeparam name="TEnum">
                The system type of the enumeration.
            </typeparam>
            <param name="enumValueName">
                The string representation of an enumeration value.
            </param>
            <returns>
                A strongly-typed value of the enumeration.
            </returns>
        </member>
        <member name="M:Omnifactotum.EnumFactotum.GetAllValues``1">
            <summary>
                Gets all values of the specified enumeration.
            </summary>
            <typeparam name="TEnum">
                The type of the enumeration.
            </typeparam>
            <returns>
                A collection of the enumeration values.
            </returns>
        </member>
        <member name="M:Omnifactotum.EnumFactotum.GetAllFlagValues``1">
            <summary>
                Gets all the flag values defined in the specified enumeration.
            </summary>
            <typeparam name="TEnum">
                The type of the enumeration.
            </typeparam>
            <returns>
                An array of all the flag values defined in the specified enumeration.
            </returns>
        </member>
        <member name="T:System.OmnifactotumDisposableExtensions">
            <summary>
                Contains extension methods for <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="M:System.OmnifactotumDisposableExtensions.DisposeSafely``1(``0)">
            <summary>
                Calls the <see cref="M:System.IDisposable.Dispose"/> method of the specified instance implementing
                the <see cref="T:System.IDisposable"/> interface, if this instance is not <c>null</c>;
                otherwise, does nothing.
            </summary>
            <typeparam name="T">
                The type of the disposable instance.
            </typeparam>
            <param name="disposable">
                A reference to an object to dispose.
            </param>
        </member>
        <member name="M:System.OmnifactotumDisposableExtensions.DisposeSafely``1(System.Nullable{``0})">
            <summary>
                Calls the <see cref="M:System.IDisposable.Dispose"/> method of the specified instance implementing
                the <see cref="T:System.IDisposable"/> interface, if this instance is not <c>null</c>;
                otherwise, does nothing.
            </summary>
            <typeparam name="T">
                The type of the disposable instance.
            </typeparam>
            <param name="disposable">
                A reference to an object to dispose.
            </param>
        </member>
        <member name="T:System.OmnifactotumArrayExtensions">
            <summary>
                Contains extension methods for array types.
            </summary>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.Copy``1(``0[])">
            <summary>
                Creates a shallow copy of the specified array.
            </summary>
            <typeparam name="T">
                The type of the elements in the array.
            </typeparam>
            <param name="array">
                The array to copy. Can be <c>null</c>.
            </param>
            <returns>
                A shallow copy of the specified array, or <c>null</c> if this array is <c>null</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.Initialize``1(``0[],System.Func{``0,System.Int32,``0})">
            <summary>
                Initializes all the elements of the specified array using the specified method to initialize
                each particular element.
            </summary>
            <typeparam name="T">
                The type of the elements in the array.
            </typeparam>
            <param name="array">
                The array whose elements to initialize.
            </param>
            <param name="getElementValue">
                A reference to a method that returns a new value for each array's element;
                the first parameter represents the previous value of the element;
                the second parameter represents the index of the element in the array.
            </param>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.Initialize``1(``0[],System.Func{System.Int32,``0})">
            <summary>
                Initializes all the elements of the specified array using the specified method to initialize
                each particular element.
            </summary>
            <typeparam name="T">
                The type of the elements in the array.
            </typeparam>
            <param name="array">
                The array whose elements to initialize.
            </param>
            <param name="getElementValue">
                A reference to a method that returns a new value for each array's element;
                the parameter represents the index of the element in the array.
            </param>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.AvoidNull``1(``0[])">
            <summary>
                Avoids the specified array to be a <c>null</c> reference: returns the specified array
                if it is not <c>null</c> or an empty array otherwise.
            </summary>
            <typeparam name="T">
                The type of elements in the array.
            </typeparam>
            <param name="source">
                The array to secure from a <c>null</c> reference.
            </param>
            <returns>
                The source array if it is not <c>null</c>; otherwise, empty array.
            </returns>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.AsReadOnly``1(``0[])">
            <summary>
                Creates a read-only wrapper for the specified array.
            </summary>
            <typeparam name="T">
                The type of values in the array.
            </typeparam>
            <param name="array">
                The array to create a read-only wrapper for.
            </param>
            <returns>
                A read-only wrapper for the specified array.
            </returns>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.ToHexString(System.Byte[],System.Boolean)">
            <summary>
                Converts the specified array of bytes to the hexadecimal string.
            </summary>
            <param name="byteArray">
                The byte array to convert.
            </param>
            <param name="useUpperCase">
                <c>true</c> to use upper case letter in the resulting hexadecimal string;
                <c>false</c> to use lower case letter in the resulting hexadecimal string.
            </param>
            <returns>
                A hexadecimal string.
            </returns>
        </member>
        <member name="M:System.OmnifactotumArrayExtensions.ToHexString(System.Byte[])">
            <summary>
                Converts the specified array of bytes to the hexadecimal string (in lower case).
            </summary>
            <param name="byteArray">
                The byte array to convert.
            </param>
            <returns>
                A hexadecimal string (in lower case).
            </returns>
        </member>
        <member name="T:System.OmnifactotumArrayExtensions.StrongTypeHelper`1">
            <summary>
                The strong type helper.
            </summary>
            <typeparam name="T">
                The type of a value or values.
            </typeparam>
        </member>
        <member name="F:System.OmnifactotumArrayExtensions.StrongTypeHelper`1._emptyArray">
            <summary>
                The empty array.
            </summary>
        </member>
        <member name="P:System.OmnifactotumArrayExtensions.StrongTypeHelper`1.EmptyArray">
            <summary>
                Gets the empty array.
            </summary>
        </member>
        <member name="T:System.Reflection.OmnifactotumAssemblyExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:System.Reflection.OmnifactotumAssemblyExtensions.GetLocalPath(System.Reflection.Assembly)">
            <summary>
                Gets the local path of the assembly.
            </summary>
            <param name="assembly">
                The assembly to get the local path of.
            </param>
            <returns>
                The local path of the specified assembly.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The specified assembly does not have a local path.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.OmnifactotumCollectionExtensions">
            <summary>
                Contains extension methods for collections, that is, for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.GetFastCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Get the number of elements in the specified collection without enumerating all
                its elements. If it's not possible to do so, <c>null</c> is returned.
            </summary>
            <typeparam name="T">
                The type of the elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to get the number of elements in.
            </param>
            <returns>
                The number of elements in the specified collection if it was possible to determine it without
                enumerating collection's elements; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.DoForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified action for each element of the collection.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to perform an action for.
            </param>
            <param name="action">
                A reference to a method representing the action to perform on an item;
                the parameter represents the item to perform the action on.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="collection"/> is <c>null</c>.</para>
                <para>-or-</para>
                <para><paramref name="action"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.DoForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
                Performs the specified action for each element of the collection.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to perform an action for.
            </param>
            <param name="action">
                A reference to a method representing the action to perform on an item;
                the first parameter represents the item to perform the action on;
                the second parameter represents the zero-based index of the element in the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="collection"/> is <c>null</c>.</para>
                <para>-or-</para>
                <para><paramref name="action"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.SetItems``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets the items in the specified collection to the specified items.
                The previously contained items are removed from the collection.
            </summary>
            <typeparam name="T">
                The type of the elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to set the items of.
            </param>
            <param name="items">
                The items to put to the collection.
            </param>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.CollectionsEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether two specified collections contain identical items in any order.
            </summary>
            <typeparam name="T">
                The type of the elements in the collections.
            </typeparam>
            <param name="collection">
                The collection to compare to another collection.
            </param>
            <param name="otherCollection">
                The another collection to compare.
            </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare elements in the
                collections, or <c>null</c> to use the default equality comparer for the type <typeparamref name="T"/>.
            </param>
            <returns>
                <c>true</c> if two specified collections contain identical items in any order or
                they both are <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.CollectionsEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether two specified collections contain identical items in any order
                using the default equality comparer.
            </summary>
            <typeparam name="T">
                The type of the elements in the collections.
            </typeparam>
            <param name="collection">
                The collection to compare to another collection.
            </param>
            <param name="otherCollection">
                The another collection to compare.
            </param>
            <returns>
                <c>true</c> if two specified collections contain identical items in any order or
                they both are <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.CollectionsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether two specified collections contain identical items in the same order.
            </summary>
            <typeparam name="T">
                The type of the elements in the collections.
            </typeparam>
            <param name="collection">
                The collection to compare to another collection.
            </param>
            <param name="otherCollection">
                The another collection to compare.
            </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare elements in the
                collections, or <c>null</c> to use the default equality comparer for the type <typeparamref name="T"/>.
            </param>
            <returns>
                <c>true</c> if two specified collections contain identical items in the same order or
                they both are <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.CollectionsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether two specified collections contain identical items in the same order
                using the default equality comparer.
            </summary>
            <typeparam name="T">
                The type of the elements in the collections.
            </typeparam>
            <param name="collection">
                The collection to compare to another collection.
            </param>
            <param name="otherCollection">
                The another collection to compare.
            </param>
            <returns>
                <c>true</c> if two specified collections contain identical items in the same order or
                they both are <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.FindDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Finds the duplicate items in the specified source collection according to the specified key selector
                using the specified equality comparer for keys.
            </summary>
            <typeparam name="T">
                The type of the elements in the source collection.
            </typeparam>
            <typeparam name="TKey">
                The type of the key by which the duplicates are determined.
            </typeparam>
            <param name="collection">
                The source collection to find the duplicates in.
            </param>
            <param name="keySelector">
                A reference to a method that returns a key, for a particular item, by which the duplicates
                are determined.
            </param>
            <param name="comparer">
                A equality comparer used to compare keys.
            </param>
            <returns>
                A dictionary in which a key is a duplicated key from the source collection keys and a value is
                the list of the corresponding duplicated items from the source collection.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.FindDuplicates``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Finds the duplicate items in the specified source collection according to the specified key selector
                using the default equality comparer.
            </summary>
            <typeparam name="T">
                The type of the elements in the source collection.
            </typeparam>
            <typeparam name="TKey">
                The type of the key by which the duplicates are determined.
            </typeparam>
            <param name="collection">
                The source collection to find the duplicates in.
            </param>
            <param name="keySelector">
                A reference to a method that returns a key, for a particular item, by which the duplicates
                are determined.
            </param>
            <returns>
                A dictionary in which a key is a duplicated key from the source collection keys and a value is
                the list of the corresponding duplicated items from the source collection.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.DisposeCollectionItemsSafely``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Safely disposes of each element in the specified collection.
                If the collection is <c>null</c>, nothing is done.
            </summary>
            <typeparam name="TDisposable">
                The type of the disposable elements in the collection.
            </typeparam>
            <param name="collection">
                A collection of disposable elements.
            </param>
            <seealso cref="M:System.OmnifactotumDisposableExtensions.DisposeSafely``1(``0)"/>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.DisposeCollectionItemsSafely``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
                Safely disposes of each element in the specified collection.
                If the collection is <c>null</c>, nothing is done.
            </summary>
            <typeparam name="TDisposable">
                The type of the disposable elements in the collection.
            </typeparam>
            <param name="collection">
                A collection of disposable elements.
            </param>
            <seealso cref="M:System.OmnifactotumDisposableExtensions.DisposeSafely``1(System.Nullable{``0})"/>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.AvoidNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Avoids the specified collection to be a <c>null</c> reference: returns the specified collection
                if it is not <c>null</c> or an empty collection otherwise.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="source">
                The collection to secure from a <c>null</c> reference.
            </param>
            <returns>
                The source collection if it is not <c>null</c>; otherwise, empty collection.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates a new instance of the <see cref="T:System.Collections.Generic.HashSet`1"/> class that uses the specified equality comparer
                for the set type, contains elements copied from the specified collection, and has sufficient capacity
                to accommodate the number of elements copied.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to create a hash set from.
            </param>
            <param name="comparer">
                The comparer to initialize a hash set with.
            </param>
            <returns>
                A created hash set.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates a new instance of the <see cref="T:System.Collections.Generic.HashSet`1"/> class that uses the default equality comparer
                for the set type, contains elements copied from the specified collection, and has sufficient capacity
                to accommodate the number of elements copied.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to create a hash set from.
            </param>
            <returns>
                A created hash set.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.GetSyncRoot``1(``0)">
            <summary>
                Gets an object that can be used to synchronize access to the specified collection.
            </summary>
            <typeparam name="T">
                The type of the collection object.
            </typeparam>
            <param name="collection">
                The collection to get a synchronization object of.
            </param>
            <returns>
                An object that can be used to synchronize access to the specified collection.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.CheckReferenceAndCountEquality``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Checks the reference and count equality.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection.
            </param>
            <param name="otherCollection">
                The other collection.
            </param>
            <returns>
                The result of the check.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionExtensions.CreateCountMap``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Creates the count map.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection.
            </param>
            <param name="comparer">
                The comparer.
            </param>
            <returns>
                The count map.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.OmnifactotumCollectionHashCodeHelper">
            <summary>
                Contains the extension methods for helping to compute the hash codes for collections of objects.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumCollectionHashCodeHelper.ComputeCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Computes the hash code of the specified collection by combining hash codes of the elements
                in the collection into a new hash code.
            </summary>
            <typeparam name="T">
                The type of elements in the collection.
            </typeparam>
            <param name="collection">
                The collection to compute a hash code of.
            </param>
            <returns>
                A hash code of the specified collection.
            </returns>
        </member>
        <member name="T:System.Reflection.OmnifactotumCustomAttributeProviderExtensions">
            <summary>
                Contains extension methods for <see cref="T:System.Reflection.ICustomAttributeProvider"/> interface.
            </summary>
        </member>
        <member name="M:System.Reflection.OmnifactotumCustomAttributeProviderExtensions.GetCustomAttributeArray``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
                Gets the list of the attributes, of the specified type, applied to the specified provider of
                custom attributes.
            </summary>
            <typeparam name="TAttribute">
                The type of the attribute.
            </typeparam>
            <param name="provider">
                The provider of custom attributes to get the attribute list of.
            </param>
            <param name="inherit">
                <c>true</c> to look up the hierarchy chain for the inherited custom attribute;
                otherwise, <c>false</c>.
            </param>
            <returns>
                The list of the attributes of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="provider"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Reflection.OmnifactotumCustomAttributeProviderExtensions.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
                Gets the list of the attributes, of the specified type, applied to the specified provider of
                custom attributes.
            </summary>
            <typeparam name="TAttribute">
                The type of the attribute.
            </typeparam>
            <param name="provider">
                The provider of custom attributes to get the attribute list of.
            </param>
            <param name="inherit">
                <c>true</c> to look up the hierarchy chain for the inherited custom attribute;
                otherwise, <c>false</c>.
            </param>
            <returns>
                The list of the attributes of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="provider"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Reflection.OmnifactotumCustomAttributeProviderExtensions.GetSingleCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
                Gets the sole specified attribute applied to the specified provider of custom attributes.
            </summary>
            <typeparam name="TAttribute">
                The type of the attribute.
            </typeparam>
            <param name="provider">
                The provider of custom attributes to get the sole attribute of.
            </param>
            <param name="inherit">
                <c>true</c> to look up the hierarchy chain for the inherited custom attribute;
                otherwise, <c>false</c>.
            </param>
            <returns>
                The attribute of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="provider"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The specified attribute either is not applied to the specified provider at all
                or is applied more than once.
            </exception>
        </member>
        <member name="M:System.Reflection.OmnifactotumCustomAttributeProviderExtensions.GetSingleOrDefaultCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
                Gets the sole specified attribute applied to the specified provider of custom attributes,
                or <c>null</c> if the specified attribute is not applied.
            </summary>
            <typeparam name="TAttribute">
                The type of the attribute.
            </typeparam>
            <param name="provider">
                The provider of custom attributes to get the sole attribute of.
            </param>
            <param name="inherit">
                <c>true</c> to look up the hierarchy chain for the inherited custom attribute;
                otherwise, <c>false</c>.
            </param>
            <returns>
                The attribute of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="provider"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The specified attribute is applied more than once.
            </exception>
        </member>
        <member name="T:System.OmnifactotumDateTimeExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.DateTime"/> structure.
            </summary>
        </member>
        <member name="M:System.OmnifactotumDateTimeExtensions.ToFixedString(System.DateTime)">
            <summary>
                Converts the specified <see cref="T:System.DateTime"/> value to its string representation in
                the format similar to extended ISO 8601.
            </summary>
            <param name="value">
                The value to convert.
            </param>
            <returns>
                A string representation of the specified <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumDateTimeExtensions.ToPreciseFixedString(System.DateTime)">
            <summary>
                Converts the specified <see cref="T:System.DateTime"/> value to its precise string representation in
                the format similar to extended ISO 8601.
            </summary>
            <param name="value">
                The value to convert.
            </param>
            <returns>
                A precise string representation of the specified <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="T:System.OmnifactotumDateTimeOffsetExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.DateTimeOffset"/> structure.
            </summary>
        </member>
        <member name="M:System.OmnifactotumDateTimeOffsetExtensions.ToFixedString(System.DateTimeOffset)">
            <summary>
                Converts the specified <see cref="T:System.DateTimeOffset"/> value to its string representation in
                the format similar to extended ISO 8601.
            </summary>
            <param name="value">
                The value to convert.
            </param>
            <returns>
                A string representation of the specified <see cref="T:System.DateTimeOffset"/> value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumDateTimeOffsetExtensions.ToPreciseFixedString(System.DateTimeOffset)">
            <summary>
                Converts the specified <see cref="T:System.DateTimeOffset"/> value to its precise string representation in
                the format similar to extended ISO 8601.
            </summary>
            <param name="value">
                The value to convert.
            </param>
            <returns>
                A precise string representation of the specified <see cref="T:System.DateTimeOffset"/> value.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.OmnifactotumDictionaryExtensions">
            <summary>
                Contains extension methods for the generic dictionary interface.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets the value associated with the specified key from the specified dictionary.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
                The dictionary to get the value from.
            </param>
            <param name="key">
                The key whose value to get.
            </param>
            <param name="defaultValue">
                The value to return in a case when the specified key is not found in the dictionary.
            </param>
            <returns>
                The value associated with the specified key if the key is found; otherwise, the default value for
                the type of the value parameter.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Gets the value associated with the specified key from the specified dictionary.
                If the specified key is not found, returns the default value for
                the type of the value parameter.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
                The dictionary to get the value from.
            </param>
            <param name="key">
                The key whose value to get.
            </param>
            <returns>
                The value associated with the specified key if the key is found; otherwise, the default value for
                the type of the value parameter.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumDictionaryExtensions.GetOrCreateValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Gets the value associated with the specified key from the specified dictionary.
                If the specified key is not found, then a value is created, using the specified value factory, and
                added to the dictionary.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
                The dictionary to get the value from.
            </param>
            <param name="key">
                The key whose value to get.
            </param>
            <param name="valueFactory">
                A reference to a method used to create a value if the key is not found.
            </param>
            <returns>
                A value that was associated with the specified key, or has been associated if it was not.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumDictionaryExtensions.GetOrCreateValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Gets the value associated with the specified key from the specified dictionary.
                If the specified key is not found, then a value is created, using the default constructor for
                the type <typeparamref name="TValue"/>, and added to the dictionary.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
                The dictionary to get the value from.
            </param>
            <param name="key">
                The key whose value to get.
            </param>
            <returns>
                A value that was associated with the specified key, or has been associated if it was not.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumDictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Creates a read-only wrapper for the specified dictionary.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
            <param name="dictionary">
                The dictionary to create a read-only wrapper for.
            </param>
            <returns>
                A read-only wrapper for the specified dictionary.
            </returns>
        </member>
        <member name="T:System.OmnifactotumEnumExtensions">
            <summary>
                Contains extension methods for enumerations.
            </summary>
        </member>
        <member name="F:System.OmnifactotumEnumExtensions.NameFormat">
            <summary>
                The type name format.
            </summary>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.GetName(System.Enum)">
            <summary>
                Gets the name of the specified enumeration value.
            </summary>
            <param name="value">
                The enumeration value to get the name of.
            </param>
            <returns>
                The name of the specified enumeration value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.GetQualifiedName(System.Enum)">
            <summary>
                Gets the qualified name of the specified enumeration value in the following form:
                <c>EnumerationName.EnumerationValueName</c>.
            </summary>
            <param name="value">
                The enumeration value to get the qualified name of.
            </param>
            <returns>
                The qualified name of the specified enumeration value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.GetFullName(System.Enum)">
            <summary>
                Gets the full name of the specified enumeration value in the following form:
                <c>EnumerationNamespace.EnumerationName.EnumerationValueName</c>.
            </summary>
            <param name="value">
                The enumeration value to get the full name of.
            </param>
            <returns>
                The full name of the specified enumeration value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.IsAllSet``1(``0,``0)">
            <summary>
                Determines whether the specified enumeration value contains all the specified flags set.
            </summary>
            <typeparam name="TEnum">
                The system type of the enumeration.
            </typeparam>
            <param name="enumerationValue">
                The enumeration value to check the flags in.
            </param>
            <param name="flags">
                The combination of the bit flags to check.
            </param>
            <returns>
                <c>true</c> if all bits specified in <paramref name="flags"/> are set
                in <paramref name="enumerationValue"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <para>
                    <typeparamref name="TEnum"/> is not an enumeration type.
                </para>
                <para>
                    -or-
                </para>
                <para>
                    The enumeration <typeparamref name="TEnum"/> is not a flag enumeration, that is,
                    <typeparamref name="TEnum"/> type is not marked by <see cref="T:System.FlagsAttribute"/>.
                </para>
            </exception>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.IsAnySet``1(``0,``0)">
            <summary>
                Determines whether the specified enumeration value contains any of the specified flags set.
            </summary>
            <typeparam name="TEnum">
                The system type of the enumeration.
            </typeparam>
            <param name="enumerationValue">
                The enumeration value to check the flags in.
            </param>
            <param name="flags">
                The combination of the bit flags to check.
            </param>
            <returns>
                <c>true</c> if any of flags specified by the <paramref name="flags"/> parameter is set
                in <paramref name="enumerationValue"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <para>
                    <typeparamref name="TEnum"/> is not an enumeration type.
                </para>
                <para>
                    -or-
                </para>
                <para>
                    The enumeration <typeparamref name="TEnum"/> is not a flag enumeration, that is,
                    <typeparamref name="TEnum"/> type is not marked by <see cref="T:System.FlagsAttribute"/>.
                </para>
            </exception>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.IsOneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the specified enumeration value equals to one of other specified enumeration
                values.
            </summary>
            <typeparam name="TEnum">
                The system type of the enumeration.
            </typeparam>
            <param name="enumerationValue">
                The enumeration value to compare to <paramref name="otherValues"/>.
            </param>
            <param name="otherValues">
                The collection of values to compare <paramref name="enumerationValue"/> to.
            </param>
            <returns>
                <c>true</c> if any of values specified by the <paramref name="otherValues"/> equals to
                <paramref name="enumerationValue"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <typeparamref name="TEnum"/> is not an enumeration type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="otherValues"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.IsOneOf``1(``0,``0[])">
            <summary>
                Determines whether the specified enumeration value equals to one of other specified enumeration
                values.
            </summary>
            <typeparam name="TEnum">
                The system type of the enumeration.
            </typeparam>
            <param name="enumerationValue">
                The enumeration value to compare to <paramref name="otherValues"/>.
            </param>
            <param name="otherValues">
                An array of values to compare <paramref name="enumerationValue"/> to.
            </param>
            <returns>
                <c>true</c> if any of values specified by the <paramref name="otherValues"/> equals to
                <paramref name="enumerationValue"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <typeparamref name="TEnum"/> is not an enumeration type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="otherValues"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.IsDefined(System.Enum)">
            <summary>
                Ensures that the specified enumeration value is defined in the corresponding enumeration and
                if it is not, throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.
            </summary>
            <param name="enumerationValue">
                The enumeration value to check.
            </param>
            <returns>
                <c>true</c> if the specified enumeration value is defined in the corresponding enumeration;
                otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="enumerationValue"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.EnsureDefined(System.Enum)">
            <summary>
                Ensures that the specified enumeration value is defined in the corresponding enumeration and
                if it is not, throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.
            </summary>
            <param name="enumerationValue">
                The enumeration value to check.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="enumerationValue"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <paramref name="enumerationValue"/> is not defined in the corresponding enumeration.
            </exception>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.CreateEnumValueNotImplementedException(System.Enum)">
            <summary>
                Creates a <see cref="T:System.NotImplementedException"/> with the descriptive message regarding
                the specified enumeration value.
            </summary>
            <param name="enumerationValue">
                The enumeration value to create an exception for.
            </param>
            <returns>
                A <see cref="T:System.NotImplementedException"/> with the descriptive message regarding
                the specified enumeration value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.CreateEnumValueNotSupportedException(System.Enum)">
            <summary>
                Creates a <see cref="T:System.NotSupportedException"/> with the descriptive message regarding
                the specified enumeration value.
            </summary>
            <param name="enumerationValue">
                The enumeration value to create an exception for.
            </param>
            <returns>
                A <see cref="T:System.NotSupportedException"/> with the descriptive message regarding
                the specified enumeration value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.GetNameInternal(System.Enum,System.Nullable{System.Boolean})">
            <summary>
                Gets the name of the specified enumeration value.
            </summary>
            <param name="value">
                The enumeration value.
            </param>
            <param name="fullEnumName">
                Specifies whether to get the full name of the enumeration value.
            </param>
            <returns>
                The name of the enumeration value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumEnumExtensions.IsSetInternal``1(``0,``0,System.Boolean)">
            <summary>
                Checks the flags.
            </summary>
            <typeparam name="TEnum">
                The type of the enumeration.
            </typeparam>
            <param name="enumerationValue">
                The enumeration value.
            </param>
            <param name="flags">
                The flags.
            </param>
            <param name="all">
                Specifies whether to check all flags.
            </param>
            <returns>
              A <see cref="T:System.Boolean"/> value.
            </returns>
        </member>
        <member name="T:System.OmnifactotumExceptionExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:System.OmnifactotumExceptionExtensions.IsFatal(System.Exception)">
            <summary>
                Determines whether the specified exception should NOT be handled by a user code.
            </summary>
            <param name="exception">
                The exception to check.
            </param>
            <returns>
                <c>true</c> if the specified exception should NOT be handled by a user code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.OmnifactotumGenericObjectExtensions">
            <summary>
                Contains extension methods for any type.
            </summary>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.EnsureNotNull``1(``0)">
            <summary>
                Returns the specified value if is not <c>null</c>;
                otherwise, throws <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">
                The reference type of the value to check.
            </typeparam>
            <param name="value">
                The value to check.
            </param>
            <returns>
                The specified value if is not <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.EnsureNotNull``1(System.Nullable{``0})">
            <summary>
                Returns the value which underlies the specified nullable value, if it is not <c>null</c>
                (that is, if its <see cref="P:System.Nullable`1.HasValue"/> property is <c>true</c>);
                otherwise, throws <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">
                The type which underlies the nullable type of the value to check.
            </typeparam>
            <param name="value">
                The value to check.
            </param>
            <returns>
                The value which underlies the specified nullable value, if it is not <c>null</c>
                (that is, if its <see cref="P:System.Nullable`1.HasValue"/> property is <c>true</c>).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="value"/> is <c>null</c>, that is, its <see cref="P:System.Nullable`1.HasValue"/> property is
                <c>false</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToStringSafely``1(``0,System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> that represents the specified value, considering that this value
                may be <c>null</c>.
            </summary>
            <typeparam name="T">
                The type of the value to get a string representation of.
            </typeparam>
            <param name="value">
                The value to get a string representation of.
            </param>
            <param name="nullValueString">
                A <see cref="T:System.String"/> to return if <paramref name="value"/> is <c>null</c>.
            </param>
            <returns>
                A <see cref="T:System.String"/> that represents the specified value, or the value of
                the <paramref name="nullValueString"/> parameter if <paramref name="value"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToStringSafely``1(``0)">
            <summary>
                Returns a <see cref="T:System.String"/> that represents the specified value, considering that this value
                may be <c>null</c>. In the latter case, the empty string is returned.
            </summary>
            <typeparam name="T">
                The type of the value to get a string representation of.
            </typeparam>
            <param name="value">
                The value to get a string representation of.
            </param>
            <returns>
                A <see cref="T:System.String"/> that represents the specified value it is not <c>null</c>;
                otherwise, the empty string.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToStringSafelyInvariant``1(``0,System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> that represents the specified value, using invariant culture and
                considering that this value may be <c>null</c>.
            </summary>
            <typeparam name="T">
                The type of the value to get a string representation of.
            </typeparam>
            <param name="value">
                The value to get a string representation of.
            </param>
            <param name="nullValueString">
                A <see cref="T:System.String"/> to return if <paramref name="value"/> is <c>null</c>.
            </param>
            <returns>
                A <see cref="T:System.String"/> that represents the specified value, or the value of
                the <paramref name="nullValueString"/> parameter if <paramref name="value"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToStringSafelyInvariant``1(``0)">
            <summary>
                Returns a <see cref="T:System.String"/> that represents the specified value, using invariant culture and
                considering that this value may be <c>null</c>.
                If the value is <c>null</c>, the empty string is returned.
            </summary>
            <typeparam name="T">
                The type of the value to get a string representation of.
            </typeparam>
            <param name="value">
                The value to get a string representation of.
            </param>
            <returns>
                A <see cref="T:System.String"/> that represents the specified value it is not <c>null</c>;
                otherwise, the empty string.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.GetHashCodeSafely``1(``0,System.Int32)">
            <summary>
                Gets a hash code of the specified value safely, that is, <n>null</n> does not cause an exception.
            </summary>
            <typeparam name="T">
                The type of the value to get a hash code of.
            </typeparam>
            <param name="value">
                The value to get a hash code of. Can be <c>null</c>.
            </param>
            <param name="nullValueHashCode">
                The value to return if the <paramref name="value"/> parameter is <c>null</c>.
            </param>
            <returns>
                A hash code of the specified value obtained by calling <see cref="M:System.Object.GetHashCode"/> for this value
                if it is not <c>null</c>; otherwise, the value specified in the <paramref name="nullValueHashCode"/>
                parameter.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.GetHashCodeSafely``1(``0)">
            <summary>
                Gets a hash code of the specified value safely, that is, <n>null</n> does not cause an exception.
            </summary>
            <typeparam name="T">
                The type of the value to get a hash code of.
            </typeparam>
            <param name="value">
                The value to get a hash code of. Can be <c>null</c>.
            </param>
            <returns>
                A hash code of the specified value obtained by calling <see cref="M:System.Object.GetHashCode"/> for this value
                if it is not <c>null</c>; otherwise, <c>0</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.GetTypeSafely``1(``0)">
            <summary>
                Gets the type of the specified value, considering that this value may be <c>null</c>.
                In the latter case, the formally specified type <typeparamref name="T"/> is returned.
            </summary>
            <typeparam name="T">
                The formal type of the value.
            </typeparam>
            <param name="value">
                The value to get the type of.
            </param>
            <returns>
                The actual type of the value if it is not <c>null</c>; otherwise, <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.AsArray``1(``0)">
            <summary>
                Creates an array containing the specified value as its sole element.
            </summary>
            <typeparam name="T">
                The type of the input value and elements of the resulting array.
            </typeparam>
            <param name="value">
                The value to create an array from.
            </param>
            <returns>
                An array containing the specified value as its sole element.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.AsList``1(``0)">
            <summary>
                Creates a strongly-typed list containing the specified value as its sole element.
            </summary>
            <typeparam name="T">
                The type of the input value and elements of the resulting list.
            </typeparam>
            <param name="value">
                The value to create a list from.
            </param>
            <returns>
                A strongly-typed list containing the specified value as its sole element.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.AsCollection``1(``0)">
            <summary>
                Gets a strongly-typed collection containing the specified value as its sole element.
            </summary>
            <typeparam name="T">
                The type of the input value and elements of the resulting collection.
            </typeparam>
            <param name="value">
                The value to create a collection from.
            </param>
            <returns>
                A strongly-typed collection containing the specified value as its sole element.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.AvoidNull``1(``0,System.Func{``0})">
            <summary>
                Avoids the specified reference type value to be a <c>null</c> reference: returns the specified value
                if it is not <c>null</c> or a default value which is returned by the specified ad-hoc method.
            </summary>
            <typeparam name="T">
                The type of the value to handle.
            </typeparam>
            <param name="source">
                The value to secure from a <c>null</c> reference.
            </param>
            <param name="getDefault">
                The method that will return the default value to use instead of <c>null</c>.
            </param>
            <returns>
                The string value if it is not <c>null</c>; otherwise, the value returned from call to
                <paramref name="getDefault"/> method.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToUIString``1(System.Nullable{``0})">
            <summary>
                Converts the specified nullable value its UI representation.
            </summary>
            <typeparam name="T">
                The underlying value type of the nullable value.
            </typeparam>
            <param name="value">
                The nullable value to convert.
            </param>
            <returns>
                The UI representation of the specified nullable value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToUIString``1(System.Nullable{``0},System.IFormatProvider)">
            <summary>
                Converts the specified nullable value its UI representation using the specified format provider.
            </summary>
            <typeparam name="T">
                The underlying value type of the nullable value.
            </typeparam>
            <param name="value">
                The nullable value to convert.
            </param>
            <param name="formatProvider">
                The provider to use to format the value, or <c>null</c> to obtain the format information
                from the current locale setting of the operating system.
            </param>
            <returns>
                The UI representation of the specified nullable value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToPropertyString``1(``0,Omnifactotum.ToPropertyStringOptions)">
            <summary>
                Gets a string representing the properties of the specified object.
            </summary>
            <typeparam name="T">
                The type of the object to convert.
            </typeparam>
            <param name="obj">
                The object to convert.
            </param>
            <param name="options">
                The options specifying how to build the string representation.
            </param>
            <returns>
                A string representing the properties of the specified object.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ToPropertyString``1(``0)">
            <summary>
                Gets a string representing the properties of the specified object.
            </summary>
            <typeparam name="T">
                The type of the object to convert.
            </typeparam>
            <param name="obj">
                The object to convert.
            </param>
            <returns>
                A string representing the properties of the specified object.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.IsEqualByContentsTo``1(``0,``0)">
            <summary>
                Determines if the contents of the specified object are equal to the contents of another specified
                object, that is, if these objects are of the same type and the values of all their corresponding
                instance fields are equal.
            </summary>
            <remarks>
                This method uses reflection to obtain the list of fields for comparison.
                This method recursively processes the composite objects, if any.
            </remarks>
            <typeparam name="T">
                The type of the objects to compare.
            </typeparam>
            <param name="obj">
                The first object to compare.
            </param>
            <param name="other">
                The second object to compare.
            </param>
            <returns>
                <c>true</c> if the contents of the two specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.Affirm``1(``0,System.Func{``0,System.Boolean})">
            <summary>
                Computes the specified predicate against the specified reference type value and
                returns this value if the predicate evaluates to <c>true</c>; otherwise, returns <c>null</c>.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="value">
                The value to compute the predicate against.
            </param>
            <param name="predicate">
                The predicate to compute.
            </param>
            <returns>
                <paramref name="value"/> if the predicate evaluates to <c>true</c>; otherwise, <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="predicate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.ComputePredicate``1(``0,System.Func{``0,System.Boolean})">
            <summary>
                Computes the specified predicate against the specified reference type value considering that
                this value can be <c>null</c>.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="value">
                The value to compute the predicate against.
            </param>
            <param name="predicate">
                The predicate to compute.
            </param>
            <returns>
                <c>true</c> if the <paramref name="value"/> is NOT <c>null</c> and the predicate evaluates to
                <c>true</c>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="predicate"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.Morph``2(``0,System.Func{``0,``1},``1)">
            <summary>
                Metamorphoses the specified reference type input value into an output value using the specified
                transformation method. If the input value is <c>null</c>, the specified default output value is
                returned.
            </summary>
            <typeparam name="TInput">
                The type of the input.
            </typeparam>
            <typeparam name="TOutput">
                The type of the output.
            </typeparam>
            <param name="input">
                The input value.
            </param>
            <param name="transform">
                A reference to the transformation method.
            </param>
            <param name="defaultOutput">
                The default output value.
            </param>
            <returns>
                An output value obtained by using the <paramref name="transform"/> method if the
                <paramref name="input"/> value is NOT <c>null</c>; otherwise, the specified default output value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transform"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.OmnifactotumGenericObjectExtensions.Morph``2(``0,System.Func{``0,``1})">
            <summary>
                Metamorphoses the specified reference type input value into an output value using the specified
                transformation method. If the input value is <c>null</c>, the default value for the output type
                is returned.
            </summary>
            <typeparam name="TInput">
                The type of the input.
            </typeparam>
            <typeparam name="TOutput">
                The type of the output.
            </typeparam>
            <param name="input">
                The input value.
            </param>
            <param name="transform">
                A reference to the transformation method.
            </param>
            <returns>
                An output value obtained by using the <paramref name="transform"/> method if the
                <paramref name="input"/> value is NOT <c>null</c>; otherwise, the default value for the output type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transform"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:System.OmnifactotumHashCodeHelper">
            <summary>
                Contains the extension methods for helping to compute the hash codes for objects.
            </summary>
        </member>
        <member name="M:System.OmnifactotumHashCodeHelper.CombineHashCodeValues(System.Int32,System.Int32)">
            <summary>
                Combines two specified hash code values into a new hash code.
            </summary>
            <param name="previousHashCode">
                The hash code of a value which is considered as previous.
            </param>
            <param name="nextHashCode">
                The hash code of a certain value which is considered as next.
            </param>
            <returns>
                A new hash code produced from the specified hash codes.
            </returns>
        </member>
        <member name="M:System.OmnifactotumHashCodeHelper.CombineHashCodes``2(``0,``1)">
            <summary>
                Combines hash code obtained from two specified instances into a new hash code.
            </summary>
            <typeparam name="TPreviuos">
                The type of an instance which is considered as previous.
            </typeparam>
            <typeparam name="TNext">
                The type of an instance which is considered as next.
            </typeparam>
            <param name="previous">
                A certain previous instance to get the hash code from.
            </param>
            <param name="next">
                A certain next instance to get the hash code from.
            </param>
            <returns>
                A new hash code produced from the hash codes obtained from the specified instances.
            </returns>
        </member>
        <member name="M:System.OmnifactotumHashCodeHelper.CombineHashCodes``1(System.Int32,``0)">
            <summary>
                Combines a hash code obtained at a previous step and a hash code of the specified instance
                into a new hash code.
            </summary>
            <typeparam name="TNext">
                The type of an instance which is considered as next.
            </typeparam>
            <param name="previousHashCode">
                The hash code of a value which is considered as previous.
            </param>
            <param name="next">
                A certain next instance to get the hash code from.
            </param>
            <returns>
                A new hash code produced from a hash code obtained at a previous step and a hash code of
                the specified instance.
            </returns>
        </member>
        <member name="T:System.Reflection.OmnifactotumMethodBaseExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.Reflection.MethodBase"/> class.
            </summary>
        </member>
        <member name="M:System.Reflection.OmnifactotumMethodBaseExtensions.GetFullName(System.Reflection.MethodBase)">
            <summary>
                Gets the full name of the specified method in the form &quot;Namespace.DeclaringType.MethodName&quot;
            </summary>
            <param name="method">
                The method to get the full name of.
            </param>
            <returns>
                The full name of the <paramref name="method"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.OmnifactotumMethodBaseExtensions.GetQualifiedName(System.Reflection.MethodBase)">
            <summary>
                Gets the qualified name of the specified method in the form &quot;DeclaringType.MethodName&quot;
            </summary>
            <param name="method">
                The method to get the qualified name of.
            </param>
            <returns>
                The qualified name of the <paramref name="method"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.OmnifactotumMethodBaseExtensions.GetSignature(System.Reflection.MethodBase)">
            <summary>
                Gets the method signature, including return type, generic type arguments, and parameter types;
                types names are short at that.
            </summary>
            <param name="method">
                The method to get the signature of.
            </param>
            <returns>
                The string representation of the method signature.
            </returns>
        </member>
        <member name="M:System.Reflection.OmnifactotumMethodBaseExtensions.GetFullSignature(System.Reflection.MethodBase)">
            <summary>
                Gets the method signature, including return type, generic type arguments, and parameter types;
                types names are full at that.
            </summary>
            <param name="method">
                The method to get the signature of.
            </param>
            <returns>
                The string representation of the method signature.
            </returns>
        </member>
        <member name="T:System.OmnifactotumNullableBooleanExtensions">
            <summary>
                Contains extension methods for
                the <see cref="T:System.Nullable`1">System.Nullable</see>&lt;<see cref="T:System.Boolean"/>&gt; type.
            </summary>
        </member>
        <member name="M:System.OmnifactotumNullableBooleanExtensions.ToString(System.Nullable{System.Boolean},System.String,System.String,System.String)">
            <summary>
                Gets the string representation of the specified nullable Boolean value.
            </summary>
            <param name="value">
                The value to get the string representation of.
            </param>
            <param name="noValueString">
                Specifies the string to return if <paramref name="value"/> is <c>null</c>, that is, has no inner value.
            </param>
            <param name="trueValueString">
                Specifies the string to return if <paramref name="value"/> is <c>true</c>.
            </param>
            <param name="falseValueString">
                Specifies the string to return if <paramref name="value"/> is <c>false</c>.
            </param>
            <returns>
                The string representation of the specified nullable Boolean value.
            </returns>
        </member>
        <member name="T:System.ServiceModel.OmnifactotumOperationContextExtensions">
            <summary>
                Contains extension methods for <see cref="T:System.ServiceModel.OperationContext"/> class.
            </summary>
        </member>
        <member name="M:System.ServiceModel.OmnifactotumOperationContextExtensions.GetClientCertificate(System.ServiceModel.OperationContext)">
            <summary>
                Gets the client certificate for the specified operation context.
            </summary>
            <param name="operationContext">
                The operation context to get the client certificate for.
            </param>
            <returns>
                An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> if the client has provided its certificate, or <c>null</c> otherwise.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.OmnifactotumSetExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.Collections.Generic.ISet`1"/> type.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.OmnifactotumSetExtensions.AsReadOnly``1(System.Collections.Generic.ISet{``0})">
            <summary>
                Returns a read-only wrapper for the specified set.
            </summary>
            <typeparam name="T">
                The type of elements in the set.
            </typeparam>
            <param name="set">
                The set to get a read-only wrapper for.
            </param>
            <returns>
                A read-only wrapper for the specified set.
            </returns>
        </member>
        <member name="T:System.OmnifactotumStringExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="F:System.OmnifactotumStringExtensions.NullString">
            <summary>
                The <c>null</c> string representation.
            </summary>
        </member>
        <member name="F:System.OmnifactotumStringExtensions.DoubleQuote">
            <summary>
                The double quote symbol.
            </summary>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.IsNullOrEmpty(System.String)">
            <summary>
                Determines whether the specified string is <c>null</c> or an <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="value">
                The string value to check.
            </param>
            <returns>
                <c>true</c> if the specified string is <c>null</c> or an <see cref="F:System.String.Empty"/> string;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                Determines whether a specified string is <c>null</c>, <see cref="F:System.String.Empty"/>,
                or consists only of white-space characters.
            </summary>
            <param name="value">
                The string value to check.
            </param>
            <returns>
                <c>true</c> if the specified value is <c>null</c> or <see cref="F:System.String.Empty"/>, or if it consists
                exclusively of white-space characters; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.ToNullableBoolean(System.String)">
            <summary>
                Converts the specified string value to an equivalent <see cref="T:System.Boolean"/> value.
                If the specified string value cannot be converted, <c>null</c> is returned.
            </summary>
            <param name="value">
                The string value to convert. Can be <c>null</c>.
            </param>
            <returns>
                The <see cref="T:System.Nullable`1"/> representation of the specified string value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.ToBoolean(System.String)">
            <summary>
                Converts the specified string value to an equivalent <see cref="T:System.Boolean"/> value.
                If the specified string value cannot be converted, an exception is thrown.
            </summary>
            <param name="value">
                The string value to convert.
            </param>
            <returns>
                The <see cref="T:System.Boolean"/> representation of the specified string value.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Concatenates a specified <see cref="T:System.String"/> separator between each element of
                the specified <see cref="T:System.String"/> collection, yielding a single concatenated string.
            </summary>
            <param name="values">
                The <see cref="T:System.String"/> collection whose items to concatenate.
            </param>
            <param name="separator">
                The separator to insert between each element of the <see cref="T:System.String"/> collection.
                Can be <c>null</c>.
            </param>
            <returns>
                A <see cref="T:System.String"/> consisting of the elements of <paramref name="values"/> delimited
                by the <paramref name="separator"/> string.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.AvoidNull(System.String)">
            <summary>
                Avoids the specified string value to be a <c>null</c> reference: returns the specified string value
                if it is not <c>null</c> or an empty string otherwise.
            </summary>
            <param name="source">
                The string value to secure from a <c>null</c> reference.
            </param>
            <returns>
                The source string value if it is not <c>null</c>; otherwise, empty string.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.ToUIString(System.String)">
            <summary>
                Converts the specified string to its UI representation.
            </summary>
            <param name="value">
                The string to convert.
            </param>
            <returns>
                The UI representation of the specified string.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.TrimSafely(System.String,System.Char[])">
            <summary>
                Removes all leading and trailing occurrences of a set of characters specified in an array
                from the specified <see cref="T:System.String"/> object.
            </summary>
            <param name="value">
                The <see cref="T:System.String"/> value to trim. Can be <c>null</c>.
            </param>
            <param name="trimChars">
                An array of Unicode characters to remove, or <c>null</c>.
            </param>
            <returns>
                The string that remains after all occurrences of the characters in the <paramref name="trimChars"/>
                parameter are removed from the start and end of the specified string.
                If <paramref name="trimChars"/> is <c>null</c> or an empty array, Unicode white-space characters
                are removed instead.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.TrimStartSafely(System.String,System.Char[])">
            <summary>
                Removes all leading occurrences of a set of characters specified in an array
                from the specified <see cref="T:System.String"/> object.
            </summary>
            <param name="value">
                The <see cref="T:System.String"/> value to trim. Can be <c>null</c>.
            </param>
            <param name="trimChars">
                An array of Unicode characters to remove, or <c>null</c>.
            </param>
            <returns>
                The string that remains after all occurrences of the characters in the <paramref name="trimChars"/>
                parameter are removed from the start of the specified string.
                If <paramref name="trimChars"/> is <c>null</c> or an empty array, Unicode white-space characters
                are removed instead.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.TrimEndSafely(System.String,System.Char[])">
            <summary>
                Removes all trailing occurrences of a set of characters specified in an array
                from the specified <see cref="T:System.String"/> object.
            </summary>
            <param name="value">
                The <see cref="T:System.String"/> value to trim. Can be <c>null</c>.
            </param>
            <param name="trimChars">
                An array of Unicode characters to remove, or <c>null</c>.
            </param>
            <returns>
                The string that remains after all occurrences of the characters in the <paramref name="trimChars"/>
                parameter are removed from the end of the specified string.
                If <paramref name="trimChars"/> is <c>null</c> or an empty array, Unicode white-space characters
                are removed instead.
            </returns>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.Shorten(System.String,System.Int32)">
            <summary>
                Shortens the specified <see cref="T:System.String"/> value if its length exceeds the specified length.
            </summary>
            <param name="value">
                The <see cref="T:System.String"/> value to shorten. Can be <c>null</c>.
            </param>
            <param name="maximumLength">
                The maximum length of the resulting string.
            </param>
            <returns>
                A <see cref="T:System.String"/> value containing the first <paramref name="maximumLength"/> characters
                of the original string value if the latter is longer than <paramref name="maximumLength"/>;
                otherwise, the original string value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="maximumLength"/> is less than zero.
            </exception>
        </member>
        <member name="M:System.OmnifactotumStringExtensions.Replicate(System.String,System.Int32)">
            <summary>
                Replicates the specified string value the specified number of times.
            </summary>
            <param name="value">
                The value to replicate. Can be <c>null</c>.
            </param>
            <param name="count">
                The number of times to replicate the specified string value.
            </param>
            <returns>
                The specified value repeated the specified number of times, or <see cref="F:System.String.Empty"/> if
                <paramref name="value"/> is <c>null</c> or an empty string or <paramref name="count"/> is zero.
            </returns>
        </member>
        <member name="T:System.OmnifactotumTimeSpanExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.TimeSpan"/> structure.
            </summary>
        </member>
        <member name="M:System.OmnifactotumTimeSpanExtensions.Multiply(System.TimeSpan,System.Decimal)">
            <summary>
                Multiplies the specified <see cref="T:System.TimeSpan"/> by the specified coefficient.
            </summary>
            <param name="value">
                The <see cref="T:System.TimeSpan"/> value to multiply.
            </param>
            <param name="coefficient">
                The coefficient to multiply by.
            </param>
            <returns>
                A new <see cref="T:System.TimeSpan"/> representing the original interval multiplied by the coefficient.
            </returns>
        </member>
        <member name="M:System.OmnifactotumTimeSpanExtensions.Divide(System.TimeSpan,System.Decimal)">
            <summary>
                Divides the specified <see cref="T:System.TimeSpan"/> by the specified divisor.
            </summary>
            <param name="value">
                The <see cref="T:System.TimeSpan"/> value to divide.
            </param>
            <param name="divisor">
                The divisor to divide by.
            </param>
            <returns>
                A new <see cref="T:System.TimeSpan"/> representing the original interval divided by the divisor.
            </returns>
        </member>
        <member name="T:System.OmnifactotumTypeExtensions">
            <summary>
                Contains extension methods for the <see cref="T:System.Type"/> type.
            </summary>
        </member>
        <member name="F:System.OmnifactotumTypeExtensions.GenericArgumentDelimiter">
            <summary>
                The generic argument delimiter.
            </summary>
        </member>
        <member name="F:System.OmnifactotumTypeExtensions.CSharpCodeProviderInstance">
            <summary>
                A reference to <see cref="T:Microsoft.CSharp.CSharpCodeProvider"/> instance.
            </summary>
        </member>
        <member name="M:System.OmnifactotumTypeExtensions.GetManifestResourceStream(System.Type,System.String)">
            <summary>
                Loads the specified manifest resource, scoped by the namespace of the specified
                type, from the assembly containing this type.
            </summary>
            <param name="type">
                The type that defines the assembly and namespace of the resource to load.
            </param>
            <param name="name">
                The case-sensitive name of the resource to load.
            </param>
            <returns>
                A <see cref="T:System.IO.Stream"/> representing the manifest resource, or <c>null</c> if no resources
                were specified during compilation or if the resource is not visible to the caller.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="name"/> is <c>null</c> or an empty string (<see cref="F:System.String.Empty"/>).
            </exception>
        </member>
        <member name="M:System.OmnifactotumTypeExtensions.GetQualifiedName(System.Type)">
            <summary>
                Gets the qualified name of the specified type, including its declaring type, if any, and generic
                arguments and excluding the namespace.
            </summary>
            <param name="type">
                The type to get the qualified name of.
            </param>
            <returns>
                The qualified name of the specified type.
            </returns>
            <example>
                Let there is the following type declaration.
                <code>
                    namespace SomeNamespace1.SomeNamespace2
                    {
                        class RootType
                        {
                            class NestedType1&lt;TKey, TValue&gt;
                            {
                                class NestedType2
                                {
                                }
                            }
                        }
                    }
                </code>
                Then <see cref="M:System.OmnifactotumTypeExtensions.GetQualifiedName(System.Type)"/> returns a result as described below.
                <list type="table">
                    <listheader>
                        <term>Input Argument</term>
                        <description>Method Result</description>
                    </listheader>
                    <item>
                        <term>
                            typeof(SomeNamespace1.SomeNamespace2.RootType.NestedType1&lt;,&gt;.NestedType2)
                        </term>
                        <description>RootType.NestedType1&lt;TKey, TValue&gt;.NestedType2</description>
                    </item>
                    <item>
                        <term>
                            typeof(SomeNamespace1.SomeNamespace2.RootType.NestedType1&lt;int, string&gt;.NestedType2)
                        </term>
                        <description>RootType.NestedType1&lt;Int32, String&gt;.NestedType2</description>
                    </item>
                </list>
            </example>
        </member>
        <member name="M:System.OmnifactotumTypeExtensions.GetFullName(System.Type)">
            <summary>
                Gets the full name of the specified type, including its declaring type, if any, and generic
                arguments and including the namespaces of all the participating types.
            </summary>
            <param name="type">
                The type to get the full name of.
            </param>
            <returns>
                The full name of the specified type.
            </returns>
            <example>
                Let there is the following type declaration.
                <code>
                    namespace SomeNamespace1.SomeNamespace2
                    {
                        class RootType
                        {
                            class NestedType1&lt;TKey, TValue&gt;
                            {
                                class NestedType2
                                {
                                }
                            }
                        }
                    }
                </code>
                Then <see cref="M:System.OmnifactotumTypeExtensions.GetFullName(System.Type)"/> returns a result as described below.
                <list type="table">
                    <listheader>
                        <term>Input Argument</term>
                        <description>Method Result</description>
                    </listheader>
                    <item>
                        <term>typeof(SomeNamespace1.SomeNamespace2.RootType.NestedType1&lt;,&gt;.NestedType2)</term>
                        <description>
                            SomeNamespace1.SomeNamespace2.RootType.NestedType1&lt;TKey, TValue&gt;.NestedType2
                        </description>
                    </item>
                    <item>
                        <term>
                            typeof(SomeNamespace1.SomeNamespace2.RootType.NestedType1&lt;int, string&gt;.NestedType2)
                        </term>
                        <description>
                            SomeNamespace1.SomeNamespace2.RootType.NestedType1&lt;Int32, String&gt;.NestedType2
                        </description>
                    </item>
                </list>
            </example>
        </member>
        <member name="M:System.OmnifactotumTypeExtensions.IsNullable(System.Type)">
            <summary>
                Determines whether the specified type is <see cref="T:System.Nullable`1"/> for a certain type T.
            </summary>
            <param name="type">
                The type to check.
            </param>
            <returns>
                <c>true</c> if the specified type is <see cref="T:System.Nullable`1"/> for a certain type T;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.OmnifactotumTypeExtensions.GetCollectionElementType(System.Type)">
            <summary>
                <para>Determines the type of the elements in the collection represented by the specified type.</para>
                <para>If the specified type is not a collection (<see cref="T:System.Collections.IEnumerable"/>) or if it is a generic type
                definition, <c>null</c> is returned.</para>
                <para>If the specified type is not a generic collection (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) but it is
                a non-generic collection (<see cref="T:System.Collections.IEnumerable"/>), <c>typeof(<see cref="T:System.Object"/>)</c>
                is returned.</para>
            </summary>
            <param name="type">
                The type for which to get the type of the elements in the collection represented by the specified type.
            </param>
            <returns>
                The type of the elements in the collection represented by the specified type.
            </returns>
        </member>
        <member name="M:System.OmnifactotumTypeExtensions.GetShortTypeNameInternal(System.Type)">
            <summary>
                Gets the short type name.
            </summary>
            <param name="type">
                The type to get the name of.
            </param>
            <returns>
                The short type name.
            </returns>
        </member>
        <member name="T:Omnifactotum.IdGenerationModes">
            <summary>
                Specifies the modes of identifier generation.
            </summary>
        </member>
        <member name="F:Omnifactotum.IdGenerationModes.Unique">
            <summary>
                A generated identifier should be unique (as <see cref="T:System.Guid"/>).
            </summary>
        </member>
        <member name="F:Omnifactotum.IdGenerationModes.Random">
            <summary>
                A generated identifier should be cryptographically random.
            </summary>
        </member>
        <member name="F:Omnifactotum.IdGenerationModes.UniqueAndRandom">
            <summary>
                A generated identifier should be both unique and cryptographically random.
            </summary>
        </member>
        <member name="T:Omnifactotum.KeyedEqualityComparer`2">
            <summary>
                Represents the equality comparer that uses a comparison key provided by the specified delegate.
            </summary>
            <typeparam name="T">
                The type of the objects to compare.
            </typeparam>
            <typeparam name="TKey">
                The type of the comparison key.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/> class
                with the specified key selector and key equality comparer.
            </summary>
            <param name="keySelector">
                A reference to a method that provides a key for an object being compared.
            </param>
            <param name="keyComparer">
                The equality comparer to use when comparing objects' keys; or <c>null</c> to use the default
                equality comparer for type <typeparamref name="TKey"/>.
            </param>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.KeyedEqualityComparer`2"/> class
                with the specified key selector and default key equality comparer.
            </summary>
            <param name="keySelector">
                A reference to a method that provides a key for an object being compared.
            </param>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer`2.Equals(`0,`0)">
            <summary>
                Determines whether the keys of the specified objects are equal.
            </summary>
            <param name="x">
                The first object of type <typeparamref name="T"/> to compare.
            </param>
            <param name="y">
                The second object of type <typeparamref name="T"/> to compare.
            </param>
            <returns>
                <c>true</c> if the keys of the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer`2.GetHashCode(`0)">
            <summary>
                Returns a hash code for the key of the specified object.
            </summary>
            <param name="obj">
                The object of type <typeparamref name="T"/> for which key a hash code is to be returned.
            </param>
            <returns>
                A hash code for the key of the specified object.
            </returns>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer`2.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
                Determines whether the specified objects are equal.
            </summary>
            <returns>
                <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
            <param name="x">
                The first object to compare.
            </param>
            <param name="y">
                The second object to compare.
            </param>
        </member>
        <member name="M:Omnifactotum.KeyedEqualityComparer`2.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>
                Returns a hash code for the key of the specified object.
            </summary>
            <param name="obj">
                The object for which key a hash code is to be returned.
            </param>
            <returns>
                A hash code for the key of the specified object.
            </returns>
        </member>
        <member name="P:Omnifactotum.KeyedEqualityComparer`2.KeySelector">
            <summary>
                Gets a reference to a method that provides a key for an object being compared.
            </summary>
        </member>
        <member name="P:Omnifactotum.KeyedEqualityComparer`2.KeyComparer">
            <summary>
                Gets the equality comparer to use when comparing objects' keys.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.KeyValuePair">
            <summary>
                Provides helper functionality for creating instances of
                the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> type using type inference in a friendly way.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
            <summary>
                Creates a new <see cref="T:System.Collections.Generic.KeyValuePair`2"/> using the specified key and value.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="key">
                The key to initialize a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with.
            </param>
            <param name="value">
                The value to initialize a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with.
            </param>
            <returns>
                A new <see cref="T:System.Collections.Generic.KeyValuePair`2"/> having the specified key and value set.
            </returns>
        </member>
        <member name="T:System.Lazy">
            <summary>
                Provides helper functionality for creating instances of the <see cref="T:System.Lazy`1"/> type using
                type inference in a friendly way.
            </summary>
        </member>
        <member name="M:System.Lazy.Create``1(System.Func{``0})">
            <summary>
                Creates a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization
                occurs, the specified initialization function is used.
            </summary>
            <typeparam name="T">
                The type of an object that is being lazily initialized.
            </typeparam>
            <param name="valueFactory">
                The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
            <returns>
                A new <see cref="T:System.Lazy`1"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="valueFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Lazy.Create``1(System.Func{``0},System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization
                occurs, the specified initialization function and initialization mode are used.
            </summary>
            <typeparam name="T">
                The type of an object that is being lazily initialized.
            </typeparam>
            <param name="valueFactory">
                The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
            <param name="isThreadSafe">
                <c>true</c> to make this instance usable concurrently by multiple threads; <c>false</c>
                to make this instance usable by only one thread at a time.
            </param>
            <returns>
                A new <see cref="T:System.Lazy`1"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="valueFactory"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:System.Lazy.Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)">
            <summary>
                Creates a new instance of the <see cref="T:System.Lazy`1"/> class that uses the specified
                initialization function and thread-safety mode.
            </summary>
            <typeparam name="T">
                The type of an object that is being lazily initialized.
            </typeparam>
            <param name="valueFactory">
                The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
            <param name="mode">
                The thread safety mode.
            </param>
            <returns>
                A new <see cref="T:System.Lazy`1"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="valueFactory"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="mode"/> contains an invalid value.
            </exception>
        </member>
        <member name="T:Omnifactotum.ReadOnlyDictionary`2">
            <summary>
                Represents a read-only wrapper for the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">
                The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
                The type of values in the dictionary.
            </typeparam>
        </member>
        <member name="F:Omnifactotum.ReadOnlyDictionary`2.ReadOnlyMessage">
            <summary>
                The read-only message.
            </summary>
        </member>
        <member name="F:Omnifactotum.ReadOnlyDictionary`2._dictionary">
            <summary>
                The wrapped dictionary.
            </summary>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionary">
                The original dictionary to wrap.
            </param>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
                Adds an element with the provided key and value to the current dictionary.
                <para>
                    <b>NOTE.</b>
                    This method is not supported by <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/>.
                </para>
            </summary>
            <param name="key">
                The object to use as the key of the element to add.
            </param>
            <param name="value">
                The object to use as the value of the element to add.
            </param>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
                Removes the element with the specified key from the current dictionary.
                <para>
                    <b>NOTE.</b>
                    This method is not supported by <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/>.
                </para>
            </summary>
            <param name="key">
                The key of the element to remove.
            </param>
            <returns>
                <c>true</c> if the element is successfully removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
                Determines whether the current dictionary contains an element with the specified key.
            </summary>
            <param name="key">
                The key to locate in the current dictionary.
            </param>
            <returns>
                <c>true</c> if the current dictionary contains an element
                with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">
                The key whose value to get.
            </param>
            <param name="value">
                When this method returns, the value associated with the specified key, if
                the key is found; otherwise, the default value for the type of the value
                parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                <c>true</c> if the current dictionary contains an element with the specified key;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Adds an item to the current collection.
                <para>
                    <b>NOTE.</b>
                    This method is not supported by <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/>.
                </para>
            </summary>
            <param name="item">
                The object to add to the current collection.
            </param>
            <exception cref="T:System.NotSupportedException">
                The current collection is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>
                Removes all items from the current collection.
                <para>
                    <b>NOTE.</b>
                    This method is not supported by <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/>.
                </para>
            </summary>
            <exception cref="T:System.NotSupportedException">
                The current collection is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Removes the first occurrence of a specific object from the current collection.
                <para>
                    <b>NOTE.</b>
                    This method is not supported by <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/>.
                </para>
            </summary>
            <param name="item">
                The object to remove from the current collection.
            </param>
            <returns>
                <c>true</c> if item was successfully removed from the current collection; otherwise, false.
            </returns>
            <exception cref="T:System.NotSupportedException">
                The current collection is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Determines whether the current collection contains a specific value.
            </summary>
            <param name="item">
                The object to locate in the current collection.
            </param>
            <returns>
                <c>true</c> if item is found in the current collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
                Copies the elements of the current collection to an <see cref="T:System.Array"/>,
                starting at a particular array index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
                copied from the current collection. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through
                the collection.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through
                the collection.
            </returns>
        </member>
        <member name="P:Omnifactotum.ReadOnlyDictionary`2.Keys">
            <summary>
                Gets a collection containing the keys of the current dictionary.
            </summary>
            <returns>
                A collection containing the keys of the current dictionary.
            </returns>
        </member>
        <member name="P:Omnifactotum.ReadOnlyDictionary`2.Values">
            <summary>
                Gets a collection containing the values in the current dictionary.
            </summary>
            <returns>
                A collection containing the values in the current dictionary.
            </returns>
        </member>
        <member name="P:Omnifactotum.ReadOnlyDictionary`2.Item(`0)">
            <summary>
                Gets or sets the element with the specified key.
                <para>
                    <b>NOTE.</b>
                    Property setter is not supported by <see cref="T:Omnifactotum.ReadOnlyDictionary`2"/>.
                </para>
            </summary>
            <param name="key">
                The key of the element to get or set.
            </param>
            <returns>
                The element with the specified key.
            </returns>
            <exception cref="T:System.NotSupportedException">
                The property is set and the current dictionary is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                The property is retrieved and key is not found.
            </exception>
        </member>
        <member name="P:Omnifactotum.ReadOnlyDictionary`2.Count">
            <summary>
                Gets the number of elements contained in the current collection.
            </summary>
            <returns>
                The number of elements contained in the current collection.
            </returns>
        </member>
        <member name="P:Omnifactotum.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
                Gets a value indicating whether the current collection is read-only.
            </summary>
            <returns>
                <c>true</c> if the current collection is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Omnifactotum.ReadOnlySet`1">
            <summary>
                Represents a generic read-only set.
            </summary>
            <typeparam name="T">
                The type of the elements in the set.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ReadOnlySet`1"/> class that is a
                read-only wrapper of the specified set.
            </summary>
            <param name="set">
                The set to wrap.
            </param>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ISet{T}#Add(`0)">
            <summary>
                Adds an element to the current set and returns a value to indicate if the
                element was successfully added.
            </summary>
            <param name="item">
                The element to add to the set.
            </param>
            <returns>
                <c>true</c> if the element is added to the set; <c>false</c> if the element is already in the set.
            </returns>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current set so that it contains only elements that are present
                either in the current set or in the specified collection, but not both.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Modifies the current set so that it contains all elements that are present
                in both the current set and in the specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a property (strict) subset of a specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <returns>
                <c>true</c> if the current set is a correct subset of <paramref name="other"/>;
                otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a correct superset of a specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <returns>
                <c>true</c> if the current set is a correct superset of <paramref name="other"/>;
                otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a subset of a specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <returns>
                <c>true</c> if the current set is a subset of <paramref name="other"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set is a superset of a specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <returns>
                <c>true</c> if the current set is a superset of <paramref name="other"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <returns>
                <c>true</c> if the current set and other share at least one common element; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether the current set and the specified collection contain the same elements.
            </summary>
            <param name="other">
                The collection to compare to the current set.
            </param>
            <returns>
                <c>true</c> if the current set is equal to <paramref name="other"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
                The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
                Removes the first occurrence of a specific object from the current set.
            </summary>
            <param name="item">
                The object to remove from the current set.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> was successfully removed from the current set;
                otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> is not found
                in the current set.
            </returns>
            <exception cref="T:System.NotSupportedException">
                The set is read-only.
            </exception>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.Contains(`0)">
            <summary>
                Determines whether the current set contains a specific value.
            </summary>
            <param name="item">
                The object to locate in the set.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> is found in the set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the current set to an
                <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
                copied from the current ser. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Omnifactotum.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Omnifactotum.ReadOnlySet`1.Count">
            <summary>
                Gets the number of elements contained in the current set.
            </summary>
        </member>
        <member name="P:Omnifactotum.ReadOnlySet`1.IsReadOnly">
            <summary>
                Gets a value indicating whether the current set is read-only.
            </summary>
        </member>
        <member name="T:Omnifactotum.RecursiveProcessingDirective">
            <summary>
                Represents the recursive processing result used
                in the <see cref="M:Omnifactotum.Factotum.ProcessRecursively``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,Omnifactotum.RecursiveProcessingDirective})"/>
                method.
            </summary>
        </member>
        <member name="F:Omnifactotum.RecursiveProcessingDirective.Continue">
            <summary>
                The processing should continue.
            </summary>
        </member>
        <member name="F:Omnifactotum.RecursiveProcessingDirective.NoRecursionForItem">
            <summary>
                The processing should not go recursively for the item being process but should continue processing
                other items.
            </summary>
        </member>
        <member name="F:Omnifactotum.RecursiveProcessingDirective.Terminate">
            <summary>
                The processing should immediately stop processing all items.
            </summary>
        </member>
        <member name="T:Omnifactotum.SmartDisposable`1">
            <summary>
                Represents the disposable wrapper for a strongly-typed object that implicitly implements or
                might implement the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <typeparam name="T">
                The type of the underlying object to dispose of.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.SmartDisposable`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.SmartDisposable`1"/> class.
            </summary>
            <param name="instance">
                The object to dispose of.
            </param>
        </member>
        <member name="M:Omnifactotum.SmartDisposable`1.Dispose">
            <summary>
                Calls <see cref="M:System.IDisposable.Dispose"/> for the underlying object,
                if it implements <see cref="T:System.IDisposable"/>; otherwise, does nothing.
            </summary>
        </member>
        <member name="P:Omnifactotum.SmartDisposable`1.Instance">
            <summary>
                Gets the underlying object.
            </summary>
        </member>
        <member name="T:Omnifactotum.SmartDisposable">
            <summary>
                Provides helper functionality for creating instances of the <see cref="T:Omnifactotum.SmartDisposable`1"/> type
                using type inference in a friendly way.
            </summary>
        </member>
        <member name="M:Omnifactotum.SmartDisposable.Create``1(``0)">
            <summary>
                Creates a new instance of the <see cref="T:Omnifactotum.SmartDisposable`1"/>
                using the specified underlying object.
            </summary>
            <typeparam name="T">
                The type of the underlying object to dispose of.
            </typeparam>
            <param name="instance">
                The object to dispose of.
            </param>
            <returns>
                A new <see cref="T:Omnifactotum.SmartDisposable`1"/> instance.
            </returns>
        </member>
        <member name="T:Omnifactotum.ToPropertyStringOptions">
            <summary>
                Represents the options used by
                the <see cref="M:Omnifactotum.Factotum.ToPropertyString``1(``0,Omnifactotum.ToPropertyStringOptions)"/> method.
            </summary>
        </member>
        <member name="F:Omnifactotum.ToPropertyStringOptions.DefaultMaxCollectionItemCount">
            <summary>
                The default value of the <see cref="P:Omnifactotum.ToPropertyStringOptions.MaxCollectionItemCount"/> property.
            </summary>
        </member>
        <member name="F:Omnifactotum.ToPropertyStringOptions.DefaultMaxRecursionLevel">
            <summary>
                The default value of the <see cref="P:Omnifactotum.ToPropertyStringOptions.MaxRecursionLevel"/> property.
            </summary>
        </member>
        <member name="M:Omnifactotum.ToPropertyStringOptions.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ToPropertyStringOptions"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.ToPropertyStringOptions.Clone">
            <summary>
                Creates a new <see cref="T:Omnifactotum.ToPropertyStringOptions"/> that is a copy of this instance.
            </summary>
            <returns>
                A new <see cref="T:Omnifactotum.ToPropertyStringOptions"/> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Omnifactotum.ToPropertyStringOptions.SetAllFlags(System.Boolean)">
            <summary>
                Sets all the possible flags in the options.
            </summary>
            <param name="value">
                The value to set to each flag.
            </param>
            <returns>
                This <see cref="T:Omnifactotum.ToPropertyStringOptions"/>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ToPropertyStringOptions.System#ICloneable#Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.RenderRootActualType">
            <summary>
                Gets or sets a value indicating whether the actual type of the root object should be rendered..
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.RenderActualType">
            <summary>
                Gets or sets a value indicating whether the actual type of each inner object should be rendered..
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.RenderComplexProperties">
            <summary>
                Gets or sets a value indicating whether the complex properties should be rendered.
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.IncludeNonPublicMembers">
            <summary>
                Gets or sets a value indicating whether the non-public members should be included.
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.RenderMemberType">
            <summary>
                Gets or sets a value indicating whether the declared type of each member should be rendered.
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.SortMembersAlphabetically">
            <summary>
                Gets or sets a value indicating whether the members should be sorted alphabetically.
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.MaxCollectionItemCount">
            <summary>
                Gets or sets the maximum number of items to render from collections.
            </summary>
        </member>
        <member name="P:Omnifactotum.ToPropertyStringOptions.MaxRecursionLevel">
            <summary>
                Gets or sets the maximum recursion level for rendering complex properties.
            </summary>
        </member>
        <member name="T:Omnifactotum.ValueContainer`1">
            <summary>
                Represents the mutable container that encapsulates a strongly-typed value.
            </summary>
            <typeparam name="T">
                The type of an encapsulated value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ValueContainer`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                The value to initialize this instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ValueContainer`1"/> class
                using the default value for the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.op_Equality(Omnifactotum.ValueContainer{`0},Omnifactotum.ValueContainer{`0})">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.ValueContainer`1"/> instances are equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ValueContainer`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ValueContainer`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.ValueContainer`1"/> instances are equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.op_Inequality(Omnifactotum.ValueContainer{`0},Omnifactotum.ValueContainer{`0})">
            <summary>
                Determines whether the two specified <see cref="T:Omnifactotum.ValueContainer`1"/> instances are not equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ValueContainer`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ValueContainer`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.ValueContainer`1"/> instances are not equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object"/> to compare with this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to
                this <see cref="T:Omnifactotum.ValueContainer`1"/> instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.GetHashCode">
            <summary>
                Returns a hash code for this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </summary>
            <returns>
                A hash code for this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueContainer`1.Equals(Omnifactotum.ValueContainer{`0})">
            <summary>
                Determines whether the current <see cref="T:Omnifactotum.ValueContainer`1"/> instance is equal to another instance
                of the same type.
            </summary>
            <param name="other">
                An object to compare with this <see cref="T:Omnifactotum.ValueContainer`1"/> instance.
            </param>
            <returns>
                <c>true</c> if the current <see cref="T:Omnifactotum.ValueContainer`1"/> instance is equal to
                the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Omnifactotum.ValueContainer`1.Value">
            <summary>
                Gets or sets the encapsulated value.
            </summary>
        </member>
        <member name="T:Omnifactotum.ValueRange`1">
            <summary>
                Represents an inclusive range of values, given lower and upper boundaries.
            </summary>
            <typeparam name="T">
                The type of the values in the range.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.#ctor(`0,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.ValueRange`1"/> structure.
            </summary>
            <param name="lower">
                The lower boundary of the range.
            </param>
            <param name="upper">
                The upper boundary of the range.
            </param>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.op_Equality(Omnifactotum.ValueRange{`0},Omnifactotum.ValueRange{`0})">
            <summary>
                Determines if the two specified <see cref="T:Omnifactotum.ValueRange`1"/> instances are equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ValueRange`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ValueRange`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.ValueRange`1"/> instances are equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.op_Inequality(Omnifactotum.ValueRange{`0},Omnifactotum.ValueRange{`0})">
            <summary>
                Determines if the two specified <see cref="T:Omnifactotum.ValueRange`1"/> instances are not equal.
            </summary>
            <param name="left">
                The first <see cref="T:Omnifactotum.ValueRange`1"/> instance to compare.
            </param>
            <param name="right">
                The second <see cref="T:Omnifactotum.ValueRange`1"/> instance to compare.
            </param>
            <returns>
                <c>true</c> if the two specified <see cref="T:Omnifactotum.ValueRange`1"/> instances are not equal;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.GetHashCode">
            <summary>
                Returns the hash code for this instance.
            </summary>
            <returns>
                A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.ValueRange`1"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.ValueRange`1"/>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.Contains(`0)">
            <summary>
                Determines whether the current range contains the specified value.
            </summary>
            <param name="value">
                The value to check.
            </param>
            <returns>
                <c>true</c> if the current range contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.Contains(Omnifactotum.ValueRange{`0})">
            <summary>
                Determines whether the current range contains the whole specified range, that is, whether
                the values within the current range are a superset of the values within the specified range.
            </summary>
            <param name="other">
                The range to check if it is contained in the current range.
            </param>
            <returns>
                <c>true</c> if the current range contains the whole specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.IntersectsWith(Omnifactotum.ValueRange{`0})">
            <summary>
                Determines whether the current range intersects with the specified range.
            </summary>
            <param name="other">
                The range to check for intersection with the current range.
            </param>
            <returns>
                <c>true</c> if the current range intersects with the specified other range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.ValueRange`1.Equals(Omnifactotum.ValueRange{`0})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
            </param>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other"/> parameter;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Omnifactotum.ValueRange`1.Lower">
            <summary>
                Gets the lower boundary of the range.
            </summary>
        </member>
        <member name="P:Omnifactotum.ValueRange`1.Upper">
            <summary>
                Gets the upper boundary of the range.
            </summary>
        </member>
        <member name="T:Omnifactotum.ValueRange">
            <summary>
                Provides helper functionality for creating instances of
                the <see cref="T:Omnifactotum.ValueRange`1"/> type using type inference in a friendly way.
            </summary>
        </member>
        <member name="M:Omnifactotum.ValueRange.Create``1(``0,``0)">
            <summary>
                Creates a new instance of the <see cref="T:Omnifactotum.ValueRange`1"/> structure using the specified values.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="lower">
                The lower boundary of the range.
            </param>
            <param name="upper">
                The upper boundary of the range.
            </param>
            <returns>
                A new instance of the <see cref="T:Omnifactotum.ValueRange`1"/> class.
            </returns>
        </member>
        <member name="T:Omnifactotum.VirtualTreeNode`1">
            <summary>
                Represents the virtual tree node, that is, a container that has a value associated with it,
                zero or more child nodes, and, optionally, a parent node.
            </summary>
            <typeparam name="T">
                The type of the node value.
            </typeparam>
        </member>
        <member name="T:Omnifactotum.VirtualTreeNodeBase`1">
            <summary>
                Represents an abstract virtual tree node, that is, a container that has zero or more children
                of the same type as itself.
            </summary>
            <typeparam name="T">
                The type of the node value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeBase`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNodeBase`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeBase`1.#ctor(System.Collections.Generic.ICollection{Omnifactotum.VirtualTreeNode{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNodeBase`1"/> class
                using the specified collection of the child nodes.
            </summary>
            <param name="children">
                The children to initialize the <see cref="T:Omnifactotum.VirtualTreeNodeBase`1"/> instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeBase`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.VirtualTreeNodeBase`1"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.VirtualTreeNodeBase`1"/>.
            </returns>
        </member>
        <member name="P:Omnifactotum.VirtualTreeNodeBase`1.Children">
            <summary>
                Gets the collection of the child nodes.
            </summary>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNode`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNode`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> class
                using the specified value.
            </summary>
            <param name="value">
                A value to initialize the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNode`1.#ctor(System.Collections.Generic.ICollection{Omnifactotum.VirtualTreeNode{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> class
                using the specified collection of the child nodes.
            </summary>
            <param name="children">
                The children to initialize the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNode`1.#ctor(`0,System.Collections.Generic.ICollection{Omnifactotum.VirtualTreeNode{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> class
                using the specified value and collection of the child nodes.
            </summary>
            <param name="value">
                A value to initialize the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> instance with.
            </param>
            <param name="children">
                The children to initialize the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> instance with.
            </param>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNode`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.VirtualTreeNode`1"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.VirtualTreeNode`1"/>.
            </returns>
        </member>
        <member name="P:Omnifactotum.VirtualTreeNode`1.Parent">
            <summary>
                Gets the parent node of the current node, or <c>null</c> if the node does not have a parent.
            </summary>
        </member>
        <member name="P:Omnifactotum.VirtualTreeNode`1.Value">
            <summary>
                Gets or sets the value associated with the current node.
            </summary>
        </member>
        <member name="T:Omnifactotum.VirtualTreeNode">
            <summary>
                Provides helper functionality for creating instances of
                the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> type using type inference in a friendly way.
            </summary>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNode.Create``1(``0)">
            <summary>
                Creates a new instance of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> class using the specified value.
            </summary>
            <typeparam name="T">
                The type of the value.
            </typeparam>
            <param name="value">
                The value to initialize <see cref="T:Omnifactotum.VirtualTreeNode`1"/> with.
            </param>
            <returns>
                A new instance of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> class.
            </returns>
        </member>
        <member name="T:Omnifactotum.VirtualTreeNodeCollection`1">
            <summary>
                The collection of the <see cref="T:Omnifactotum.VirtualTreeNode`1"/> instances.
            </summary>
            <typeparam name="T">
                The type of the node value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.#ctor(Omnifactotum.VirtualTreeNodeBase{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> class.
            </summary>
            <param name="owner">
                The owner of the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </param>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.#ctor(Omnifactotum.VirtualTreeNodeBase{`0},System.Collections.Generic.IEnumerable{Omnifactotum.VirtualTreeNode{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> class
                using the specified collection of the nodes.
            </summary>
            <param name="owner">
                The node which is the owner of the collection.
            </param>
            <param name="collection">
                The collection of the nodes to initialize the current collection with.
            </param>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.ToString">
            <summary>
                Returns a <see cref="T:System.String"/> that represents
                this <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </summary>
            <returns>
                A <see cref="T:System.String"/> that represents this <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </returns>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.AddRange(System.Collections.Generic.IEnumerable{Omnifactotum.VirtualTreeNode{`0}})">
            <summary>
                Adds the elements of the specified collection to the end of
                this <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </summary>
            <param name="collection">
                The collection whose elements should be added
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="collection"/> is <c>null</c>.</para>
                <para>-or-</para>
                <para>An item within the specified <paramref name="collection"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                An item within the specified <paramref name="collection"/> already belongs to this or
                another collection.
            </exception>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.IndexOf(Omnifactotum.VirtualTreeNode{`0})">
            <summary>
                Determines the index of a specific item.
            </summary>
            <param name="item">
                The object to locate.
            </param>
            <returns>
                The index of <paramref name="item"/> if found; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.Insert(System.Int32,Omnifactotum.VirtualTreeNode{`0})">
            <summary>
                Inserts an item to the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> at the specified index.
            </summary>
            <param name="index">
                The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
                The object to insert into the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index in the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="item"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="item"/> already belongs to this or another collection.
            </exception>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified index.
            </summary>
            <param name="index">
                The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index in the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </exception>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.Add(Omnifactotum.VirtualTreeNode{`0})">
            <summary>
                Adds an item to the end of the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </summary>
            <param name="item">
                The object to add to the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="item"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="item"/> already belongs to this or another collection.
            </exception>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.Clear">
            <summary>
                Removes all items from the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </summary>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.Contains(Omnifactotum.VirtualTreeNode{`0})">
            <summary>
                Determines whether the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> contains the specific item.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.CopyTo(Omnifactotum.VirtualTreeNode{`0}[],System.Int32)">
            <summary>
                Copies the elements of the current <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> to
                an <see cref="T:System.Array"/>, starting at a particular array index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
                copied from the current <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
                The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.Remove(Omnifactotum.VirtualTreeNode{`0})">
            <summary>
                Removes the first occurrence of the specified item from
                the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </summary>
            <param name="item">
                The object to remove from the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </param>
            <returns>
                <c>true</c> if <paramref name="item"/> was successfully removed from
                the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Omnifactotum.VirtualTreeNodeCollection`1.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">
                The zero-based index of the element to get or set.
            </param>
            <returns>
                The element at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index.
            </exception>
        </member>
        <member name="P:Omnifactotum.VirtualTreeNodeCollection`1.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/>.
            </summary>
        </member>
        <member name="P:Omnifactotum.VirtualTreeNodeCollection`1.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> is read-only.
            </summary>
            <returns>
                The implementation of <see cref="T:Omnifactotum.VirtualTreeNodeCollection`1"/> returns <c>false</c>.
            </returns>
        </member>
        <member name="T:Omnifactotum.VirtualTreeNodeRoot`1">
            <summary>
                Represents the root of virtual tree nodes. That is, <see cref="T:Omnifactotum.VirtualTreeNodeRoot`1"/> is just
                the container that has zero or more child nodes.
            </summary>
            <typeparam name="T">
                The type of the node value.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeRoot`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNodeRoot`1"/> class.
            </summary>
        </member>
        <member name="M:Omnifactotum.VirtualTreeNodeRoot`1.#ctor(System.Collections.Generic.ICollection{Omnifactotum.VirtualTreeNode{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.VirtualTreeNodeRoot`1"/> class
                using the specified collection of the child nodes.
            </summary>
            <param name="children">
                The children to initialize the <see cref="T:Omnifactotum.VirtualTreeNodeRoot`1"/> instance with.
            </param>
        </member>
        <member name="T:Omnifactotum.WeakReferenceBasedCache`2">
            <summary>
                Represents the cache which is similar to a dictionary and leverages <see cref="T:System.WeakReference"/>
                for the cached values.
            </summary>
            <typeparam name="TKey">
                The type of the keys in the cache.
            </typeparam>
            <typeparam name="TValue">
                The type of the values in the cache.
            </typeparam>
        </member>
        <member name="M:Omnifactotum.WeakReferenceBasedCache`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.WeakReferenceBasedCache`2"/> class
                using the specified value factory and equality comparer for keys.
            </summary>
            <param name="valueFactory">
                A reference to a method that creates a value for the specified key once needed.
            </param>
            <param name="keyEqualityComparer">
                The equality comparer to use when comparing keys, or <c>null</c> to use
                the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
        </member>
        <member name="M:Omnifactotum.WeakReferenceBasedCache`2.#ctor(System.Func{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Omnifactotum.WeakReferenceBasedCache`2"/> class
                using the specified value factory and default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of
                the key.
            </summary>
            <param name="valueFactory">
                A reference to a method that creates a value for the specified key once needed.
            </param>
        </member>
        <member name="M:Omnifactotum.WeakReferenceBasedCache`2.Clear">
            <summary>
                Clears the cache.
            </summary>
        </member>
        <member name="M:Omnifactotum.WeakReferenceBasedCache`2.Remove(`0)">
            <summary>
                Removes the value associated with the specified key.
            </summary>
            <param name="key">
                The key to remove.
            </param>
            <returns>
                <c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Omnifactotum.WeakReferenceBasedCache`2.KeyEqualityComparer">
            <summary>
                Gets the equality comparer used when comparing keys.
            </summary>
            <remarks>
                This property is thread-safe.
            </remarks>
        </member>
        <member name="P:Omnifactotum.WeakReferenceBasedCache`2.Count">
            <summary>
                Gets the number of the items in the cache.
            </summary>
        </member>
        <member name="P:Omnifactotum.WeakReferenceBasedCache`2.Item(`0)">
            <summary>
                Gets a value associated with the specified key.
            </summary>
            <param name="key">
                The key to get a value for.
            </param>
            <returns>
                A value associated with the specified key.
            </returns>
        </member>
        <member name="T:Omnifactotum.WinEventLog">
            <summary>
                Provides the simple interface to write to the Windows <b>Event Log</b>.
            </summary>
        </member>
        <member name="M:Omnifactotum.WinEventLog.Write(System.String,System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
                Writes the specified message to the <b>Windows Event Log</b>.
            </summary>
            <param name="source">
                The source by which the application is registered on the specified computer.
            </param>
            <param name="type">
                The type of the event log entry.
            </param>
            <param name="message">
                The message to write to the event log.
            </param>
        </member>
        <member name="M:Omnifactotum.WinEventLog.Write(System.String,System.Diagnostics.EventLogEntryType,System.String,System.Object[])">
            <summary>
                Writes the message to the <b>Windows Event Log</b>, using the specified array of objects and
                formatting information.
            </summary>
            <param name="source">
                The source by which the application is registered on the specified computer.
            </param>
            <param name="type">
                The type of the event log entry.
            </param>
            <param name="format">
                A format string that contains zero or more format items, which correspond to objects in
                the <paramref name="args"/> array.
            </param>
            <param name="args">
                An object array containing zero or more objects to format.
            </param>
        </member>
        <member name="M:Omnifactotum.WinEventLog.Write(System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
                Writes the specified message to the <b>Windows Event Log</b>
                using <see cref="P:Omnifactotum.WinEventLog.DefaultSource"/>.
                If <see cref="P:Omnifactotum.WinEventLog.DefaultSource"/> is <c>null</c> or empty, the entry assembly name is used.
            </summary>
            <param name="type">
                The type of the event log entry.
            </param>
            <param name="message">
                The message to write to the event log.
            </param>
        </member>
        <member name="M:Omnifactotum.WinEventLog.Write(System.Diagnostics.EventLogEntryType,System.String,System.Object[])">
            <summary>
                Writes the message to the <b>Windows Event Log</b>
                using <see cref="P:Omnifactotum.WinEventLog.DefaultSource"/> and the specified array of objects and
                formatting information.
                If <see cref="P:Omnifactotum.WinEventLog.DefaultSource"/> is <c>null</c> or empty, the entry assembly name is used.
            </summary>
            <param name="type">
                The type of the event log entry.
            </param>
            <param name="format">
                A format string that contains zero or more format items, which correspond to objects in
                the <paramref name="args"/> array.
            </param>
            <param name="args">
                An object array containing zero or more objects to format.
            </param>
        </member>
        <member name="P:Omnifactotum.WinEventLog.DefaultSource">
            <summary>
                Gets or sets the default source for the entries written
                using <see cref="M:Omnifactotum.WinEventLog.Write(System.Diagnostics.EventLogEntryType,System.String)"/>.
            </summary>
        </member>
    </members>
</doc>
