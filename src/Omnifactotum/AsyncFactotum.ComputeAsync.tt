<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ include file="AsyncFactotum.Common.ttinclude" #>
<#@ output encoding="utf-8" extension=".cs" #>
// <auto-generated>
//     This code was generated by T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Omnifactotum.Annotations;

namespace Omnifactotum
{
    public static partial class AsyncFactotum
    {
<# for (var index = 0; index <= MaxParameterCount; index++) { #>
        #region Public Methods: ComputeAsync[<#= index.ToString(CultureInfo.InvariantCulture) #>]

        /// <summary>
        ///     Computes a result of the specified method asynchronously using the specified exception logging method.
        /// </summary>
<# for (var typeIndex = 1; typeIndex <= index; typeIndex++) { #>
        /// <typeparam name="T<#= typeIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The type of the <#= ToNumeral(typeIndex) #> argument of the method.
        /// </typeparam>
<# } #>
        /// <typeparam name="TResult">
        ///     The type of the result of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
<# for (var argIndex = 1; argIndex <= index; argIndex++) { #>
        /// <param name="arg<#= argIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The <#= ToNumeral(argIndex) #> argument of the method.
        /// </param>
<# } #>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <c>null</c>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <c>null</c>.</para>
        /// </exception>
        public static Task<TResult> ComputeAsync<<#= EnumerateTypeArgs(index) #>TResult>(
            [NotNull] Func<<#= EnumerateTypeArgs(index) #>TResult> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError<#= EnumerateFormalArgs(index) #>)
        {
            #region Argument Check

            if (callee == null)
            {
                throw new ArgumentNullException("callee");
            }

            if (logError == null)
            {
                throw new ArgumentNullException("logError");
            }

            #endregion

            var task = CreateAndStartComputeTask(
                <# if (index == 0) { #>callee<# } else { #>() => callee(<#= EnumerateActualArgs(index) #>)<# } #>,
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Computes a result of the specified method asynchronously using the specified exception logging method.
        /// </summary>
<# for (var typeIndex = 1; typeIndex <= index; typeIndex++) { #>
        /// <typeparam name="T<#= typeIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The type of the <#= ToNumeral(typeIndex) #> argument of the method.
        /// </typeparam>
<# } #>
        /// <typeparam name="TResult">
        ///     The type of the result of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
<# for (var argIndex = 1; argIndex <= index; argIndex++) { #>
        /// <param name="arg<#= argIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The <#= ToNumeral(argIndex) #> argument of the method.
        /// </param>
<# } #>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <c>null</c>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <c>null</c>.</para>
        /// </exception>
        public static Task<TResult> ComputeAsync<<#= EnumerateTypeArgs(index) #>TResult>(
            [NotNull] Func<<#= EnumerateTypeArgs(index) #>TResult> callee,
            [NotNull] LogErrorWithException logError<#= EnumerateFormalArgs(index) #>)
        {
            #region Argument Check

            if (callee == null)
            {
                throw new ArgumentNullException("callee");
            }

            if (logError == null)
            {
                throw new ArgumentNullException("logError");
            }

            #endregion

            var task = CreateAndStartComputeTask(
                <# if (index == 0) { #>callee<# } else { #>() => callee(<#= EnumerateActualArgs(index) #>)<# } #>,
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Computes a result of the specified method asynchronously using the specified exception logging method.
        /// </summary>
<# for (var typeIndex = 1; typeIndex <= index; typeIndex++) { #>
        /// <typeparam name="T<#= typeIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The type of the <#= ToNumeral(typeIndex) #> argument of the method.
        /// </typeparam>
<# } #>
        /// <typeparam name="TResult">
        ///     The type of the result of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
<# for (var argIndex = 1; argIndex <= index; argIndex++) { #>
        /// <param name="arg<#= argIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The <#= ToNumeral(argIndex) #> argument of the method.
        /// </param>
<# } #>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <c>null</c>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <c>null</c>.</para>
        /// </exception>
        public static Task<TResult> ComputeAsync<<#= EnumerateTypeArgs(index) #>TResult>(
            [NotNull] Func<<#= EnumerateTypeArgs(index) #>TResult> callee,
            [NotNull] LogErrorWithMessage logError<#= EnumerateFormalArgs(index) #>)
        {
            #region Argument Check

            if (callee == null)
            {
                throw new ArgumentNullException("callee");
            }

            if (logError == null)
            {
                throw new ArgumentNullException("logError");
            }

            #endregion

            var task = CreateAndStartComputeTask(
                <# if (index == 0) { #>callee<# } else { #>() => callee(<#= EnumerateActualArgs(index) #>)<# } #>,
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Computes a result of the specified method asynchronously using the default options.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
<# for (var typeIndex = 1; typeIndex <= index; typeIndex++) { #>
        /// <typeparam name="T<#= typeIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The type of the <#= ToNumeral(typeIndex) #> argument of the method.
        /// </typeparam>
<# } #>
        /// <typeparam name="TResult">
        ///     The type of the result of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
<# for (var argIndex = 1; argIndex <= index; argIndex++) { #>
        /// <param name="arg<#= argIndex.ToString(CultureInfo.InvariantCulture) #>">
        ///     The <#= ToNumeral(argIndex) #> argument of the method.
        /// </param>
<# } #>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <c>null</c>.</para>
        /// </exception>
        public static Task<TResult> ComputeAsync<<#= EnumerateTypeArgs(index) #>TResult>(
            [NotNull] Func<<#= EnumerateTypeArgs(index) #>TResult> callee<#= EnumerateFormalArgs(index) #>)
        {
            #region Argument Check

            if (callee == null)
            {
                throw new ArgumentNullException("callee");
            }

            #endregion

            var task = CreateAndStartComputeTask(
                <# if (index == 0) { #>callee<# } else { #>() => callee(<#= EnumerateActualArgs(index) #>)<# } #>,
                callee.Method,
                (LogErrorWithMessage)TraceErrorInternal,
                AttachErrorLoggingTask);

            return task;
        }

        #endregion
<# if (index < MaxParameterCount) { WriteLine(string.Empty); } } #>
    }
}