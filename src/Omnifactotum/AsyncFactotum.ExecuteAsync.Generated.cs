// <auto-generated>
//     This code was generated by T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Omnifactotum.Annotations;

namespace Omnifactotum
{
    public static partial class AsyncFactotum
    {
        #region ExecuteAsync[0]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync(
            [NotNull] Action callee,
            [NotNull] LogErrorWithExceptionAndMessage logError)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                callee,
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync(
            [NotNull] Action callee,
            [NotNull] LogErrorWithException logError)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                callee,
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync(
            [NotNull] Action callee,
            [NotNull] LogErrorWithMessage logError)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                callee,
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync(
            [NotNull] Action callee)
        {
            return ExecuteAsync(callee, (LogErrorWithMessage)TraceErrorInternal);
        }

        #endregion

        #region ExecuteAsync[1]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1>(
            [NotNull] Action<T1> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1>(
            [NotNull] Action<T1> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1>(
            [NotNull] Action<T1> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1>(
            [NotNull] Action<T1> callee,
            T1 arg1)
        {
            return ExecuteAsync<T1>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1);
        }

        #endregion

        #region ExecuteAsync[2]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2>(
            [NotNull] Action<T1, T2> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2>(
            [NotNull] Action<T1, T2> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2>(
            [NotNull] Action<T1, T2> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2>(
            [NotNull] Action<T1, T2> callee,
            T1 arg1,
            T2 arg2)
        {
            return ExecuteAsync<T1, T2>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2);
        }

        #endregion

        #region ExecuteAsync[3]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3>(
            [NotNull] Action<T1, T2, T3> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3>(
            [NotNull] Action<T1, T2, T3> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3>(
            [NotNull] Action<T1, T2, T3> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3>(
            [NotNull] Action<T1, T2, T3> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3)
        {
            return ExecuteAsync<T1, T2, T3>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3);
        }

        #endregion

        #region ExecuteAsync[4]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4>(
            [NotNull] Action<T1, T2, T3, T4> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4>(
            [NotNull] Action<T1, T2, T3, T4> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4>(
            [NotNull] Action<T1, T2, T3, T4> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4>(
            [NotNull] Action<T1, T2, T3, T4> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4)
        {
            return ExecuteAsync<T1, T2, T3, T4>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region ExecuteAsync[5]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5>(
            [NotNull] Action<T1, T2, T3, T4, T5> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5>(
            [NotNull] Action<T1, T2, T3, T4, T5> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5>(
            [NotNull] Action<T1, T2, T3, T4, T5> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5>(
            [NotNull] Action<T1, T2, T3, T4, T5> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5);
        }

        #endregion

        #region ExecuteAsync[6]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        #endregion

        #region ExecuteAsync[7]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }

        #endregion

        #region ExecuteAsync[8]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }

        #endregion

        #region ExecuteAsync[9]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }

        #endregion

        #region ExecuteAsync[10]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }

        #endregion

        #region ExecuteAsync[11]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }

        #endregion

        #region ExecuteAsync[12]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        }

        #endregion

        #region ExecuteAsync[13]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }

        #endregion

        #region ExecuteAsync[14]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
        }

        #endregion

        #region ExecuteAsync[15]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
        }

        #endregion

        #region ExecuteAsync[16]

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <typeparam name="T16">
        ///     The type of the 16th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <param name="arg16">
        ///     The 16th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> callee,
            [NotNull] LogErrorWithExceptionAndMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15,
            T16 arg16)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <typeparam name="T16">
        ///     The type of the 16th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <param name="arg16">
        ///     The 16th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> callee,
            [NotNull] LogErrorWithException logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15,
            T16 arg16)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously using the specified exception logging method.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <typeparam name="T16">
        ///     The type of the 16th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="logError">
        ///     A reference to a method that will log an exception occurred during execution of asynchronous
        ///     operation.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <param name="arg16">
        ///     The 16th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        ///     <para>- or -</para>
        ///     <para><paramref name="logError"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> callee,
            [NotNull] LogErrorWithMessage logError,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15,
            T16 arg16)
        {
            if (callee is null)
            {
                throw new ArgumentNullException(nameof(callee));
            }

            if (logError is null)
            {
                throw new ArgumentNullException(nameof(logError));
            }

            var task = CreateAndStartExecuteTask(
                () => callee(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16),
                callee.Method,
                logError,
                AttachErrorLoggingTask);

            return task;
        }

        /// <summary>
        ///     Executes the specified method asynchronously.
        ///     This method uses <see cref="Trace"/> to log asynchronous operation errors.
        /// </summary>
        /// <typeparam name="T1">
        ///     The type of the 1st argument of the method.
        /// </typeparam>
        /// <typeparam name="T2">
        ///     The type of the 2nd argument of the method.
        /// </typeparam>
        /// <typeparam name="T3">
        ///     The type of the 3rd argument of the method.
        /// </typeparam>
        /// <typeparam name="T4">
        ///     The type of the 4th argument of the method.
        /// </typeparam>
        /// <typeparam name="T5">
        ///     The type of the 5th argument of the method.
        /// </typeparam>
        /// <typeparam name="T6">
        ///     The type of the 6th argument of the method.
        /// </typeparam>
        /// <typeparam name="T7">
        ///     The type of the 7th argument of the method.
        /// </typeparam>
        /// <typeparam name="T8">
        ///     The type of the 8th argument of the method.
        /// </typeparam>
        /// <typeparam name="T9">
        ///     The type of the 9th argument of the method.
        /// </typeparam>
        /// <typeparam name="T10">
        ///     The type of the 10th argument of the method.
        /// </typeparam>
        /// <typeparam name="T11">
        ///     The type of the 11th argument of the method.
        /// </typeparam>
        /// <typeparam name="T12">
        ///     The type of the 12th argument of the method.
        /// </typeparam>
        /// <typeparam name="T13">
        ///     The type of the 13th argument of the method.
        /// </typeparam>
        /// <typeparam name="T14">
        ///     The type of the 14th argument of the method.
        /// </typeparam>
        /// <typeparam name="T15">
        ///     The type of the 15th argument of the method.
        /// </typeparam>
        /// <typeparam name="T16">
        ///     The type of the 16th argument of the method.
        /// </typeparam>
        /// <param name="callee">
        ///     The method that is run asynchronously.
        /// </param>
        /// <param name="arg1">
        ///     The 1st argument of the method.
        /// </param>
        /// <param name="arg2">
        ///     The 2nd argument of the method.
        /// </param>
        /// <param name="arg3">
        ///     The 3rd argument of the method.
        /// </param>
        /// <param name="arg4">
        ///     The 4th argument of the method.
        /// </param>
        /// <param name="arg5">
        ///     The 5th argument of the method.
        /// </param>
        /// <param name="arg6">
        ///     The 6th argument of the method.
        /// </param>
        /// <param name="arg7">
        ///     The 7th argument of the method.
        /// </param>
        /// <param name="arg8">
        ///     The 8th argument of the method.
        /// </param>
        /// <param name="arg9">
        ///     The 9th argument of the method.
        /// </param>
        /// <param name="arg10">
        ///     The 10th argument of the method.
        /// </param>
        /// <param name="arg11">
        ///     The 11th argument of the method.
        /// </param>
        /// <param name="arg12">
        ///     The 12th argument of the method.
        /// </param>
        /// <param name="arg13">
        ///     The 13th argument of the method.
        /// </param>
        /// <param name="arg14">
        ///     The 14th argument of the method.
        /// </param>
        /// <param name="arg15">
        ///     The 15th argument of the method.
        /// </param>
        /// <param name="arg16">
        ///     The 16th argument of the method.
        /// </param>
        /// <returns>
        ///     A task that is executing or has executed the specified method asynchronously.
        /// </returns>
        /// <exception cref="System.ArgumentNullException">
        ///     <para><paramref name="callee"/> is <see langword="null"/>.</para>
        /// </exception>
        public static Task ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(
            [NotNull] Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> callee,
            T1 arg1,
            T2 arg2,
            T3 arg3,
            T4 arg4,
            T5 arg5,
            T6 arg6,
            T7 arg7,
            T8 arg8,
            T9 arg9,
            T10 arg10,
            T11 arg11,
            T12 arg12,
            T13 arg13,
            T14 arg14,
            T15 arg15,
            T16 arg16)
        {
            return ExecuteAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(callee, (LogErrorWithMessage)TraceErrorInternal, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
        }

        #endregion
    }
}