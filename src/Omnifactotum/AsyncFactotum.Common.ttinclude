<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text" #><#+
    private const int MaxParameterCount = 16;

    private static string ToNumeral(int number)
    {
        const string DefaultSuffix = "th";

        var rem100 = Math.Abs(number) % 100;
        var isTeen = rem100 is >= 11 and <= 19;
        var rem10 = Math.Abs(number) % 10;

        var suffix = rem10 switch
        {
            1 => isTeen ? DefaultSuffix : "st",
            2 => isTeen ? DefaultSuffix : "nd",
            3 => isTeen ? DefaultSuffix : "rd",
            _ => DefaultSuffix
        };

        return string.Format(CultureInfo.InvariantCulture, "{0}{1}", number, suffix);
    }

    private static string EnumerateFuncTypeArgs(int count)
    {
        return EnumeratePrefixedValues("T{0}", ", ", false, count, true);
    }

    private static string EnumerateTypeArgs(string template, int count)
    {
        return count == 0
            ? string.Empty
            : "<" + EnumeratePrefixedValues(template, ", ", false, count, false) + ">";
    }

    private static string EnumerateActionTypeArgs(int count)
    {
        return EnumerateTypeArgs("T{0}", count);
    }

    private static string EnumerateFormalArgs(int count)
    {
        return EnumeratePrefixedValues(
            "T{0} arg{0}",
            "," + Environment.NewLine + "            ",
            true,
            count,
            false);
    }

    private static string EnumerateActualArgs(int count, bool addStartSeparator = false)
    {
        return EnumeratePrefixedValues("arg{0}", ", ", addStartSeparator, count, false);
    }

    private static string EnumeratePrefixedValues(
        string template,
        string separator,
        bool addStartSeparator,
        int count,
        bool addEndSeparator)
    {
        if (count == 0)
        {
            return string.Empty;
        }

        var sb = new StringBuilder();
        if (addStartSeparator)
        {
            sb.Append(separator);
        }

        for (var i = 1; i <= count; i++)
        {
            if (i > 1)
            {
                sb.Append(separator);
            }

            sb.AppendFormat(CultureInfo.InvariantCulture, template, i);
        }

        if (addEndSeparator)
        {
            sb.Append(separator);
        }

        return sb.ToString();
    }
#>