<?xml version="1.0" encoding="utf-8"?>

<Project InitialTargets="__X_Initialize">
    <PropertyGroup>
        <Version>0.24.0</Version>
        <PackageValidationBaselineVersion>0.23.0</PackageValidationBaselineVersion>
    </PropertyGroup>

    <PropertyGroup>
        <!-- AD0001: Analyzer exception -->
        <WarningsAsErrors>$(WarningsAsErrors);AD0001</WarningsAsErrors>

        <!-- RS1041: Compiler extensions should be implemented in assemblies targeting netstandard2.0: https://github.com/dotnet/roslyn-analyzers/blob/main/docs/rules/RS1041.md -->
        <WarningsAsErrors>$(WarningsAsErrors);RS1041</WarningsAsErrors>

        <!-- RS2008: Enable analyzer release tracking for the analyzer project containing rule '...' -->
        <NoWarn>$(NoWarn);RS2008</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
        <VersionSuffix>-debug</VersionSuffix>
        <BuildDateYear>$([System.String]::Format("{0:yyyy}", $([System.DateTime]::UtcNow)))</BuildDateYear>
        <PackageReleaseNotes>N/A</PackageReleaseNotes>
        <IsAppveyorBuild>false</IsAppveyorBuild>
    </PropertyGroup>

    <PropertyGroup>
        <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    </PropertyGroup>

    <PropertyGroup>
        <__X_LogCustomProperties>true</__X_LogCustomProperties>
        <__X_LogStandardProperties>true</__X_LogStandardProperties>
    </PropertyGroup>

    <PropertyGroup>
        <__X_SolutionDir>$([MSBuild]::NormalizeDirectory('$(MSBuildThisFileDirectory)'))</__X_SolutionDir>
        <__X_RootSolutionOutputPath>$([MSBuild]::NormalizeDirectory('$(__X_SolutionDir)', '.out'))</__X_RootSolutionOutputPath>
        <__X_TestResultsSubdirectory>TestResults</__X_TestResultsSubdirectory>
        <__X_BenchmarkResultsSubdirectory>benchmarks</__X_BenchmarkResultsSubdirectory>
    </PropertyGroup>

    <PropertyGroup>
        <OutputPath>$([MSBuild]::NormalizeDirectory('$(__X_RootSolutionOutputPath)', 'bin', '$(Platform)', '$(Configuration)', '$(MSBuildProjectName)'))</OutputPath>
        <BaseIntermediateOutputPath>$([MSBuild]::NormalizeDirectory('$(__X_RootSolutionOutputPath)', 'obj', '$(MSBuildProjectName)'))</BaseIntermediateOutputPath>
        <PackageOutputPath>$([MSBuild]::NormalizeDirectory('$(__X_RootSolutionOutputPath)', 'NuGet'))</PackageOutputPath>
        <VSTestResultsDirectory>$([MSBuild]::NormalizeDirectory('$(OutputPath)', '$(__X_TestResultsSubdirectory)'))</VSTestResultsDirectory>
        <RunSettingsFilePath/>
    </PropertyGroup>

    <PropertyGroup>
        <LangVersion>13.0</LangVersion>
        <Nullable>enable</Nullable>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <WarningsAsErrors/>
        <CheckEolTargetFramework>false</CheckEolTargetFramework>
    </PropertyGroup>

    <PropertyGroup>
        <DebugSymbols>true</DebugSymbols>
        <DebugType>portable</DebugType>
        <EmbedAllSources>true</EmbedAllSources>
        <Deterministic>true</Deterministic>
        <SignAssembly>true</SignAssembly>
        <DelaySign>false</DelaySign>
    </PropertyGroup>

    <PropertyGroup>
        <Authors>Vitalii Maklai</Authors>
        <Company>$(Authors)</Company>
        <Copyright>Copyright © $(Authors) 2004-$(BuildDateYear)</Copyright>
        <RepositoryType>git</RepositoryType>
        <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageTags>C#;CSharp;omnifactotum;omni;factotum;aid;assistant;extension;extensions;helper;helpers;common;typical</PackageTags>
        <IncludeSymbols>true</IncludeSymbols>
        <IncludeSource>true</IncludeSource>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <EnablePackageValidation>false</EnablePackageValidation>
        <MinClientVersion>5.4.0</MinClientVersion>
        <EnableStrictModeForCompatibleTfms>true</EnableStrictModeForCompatibleTfms>
        <EnableStrictModeForCompatibleFrameworksInPackage>false</EnableStrictModeForCompatibleFrameworksInPackage>
    </PropertyGroup>

    <Target Name="CleanTestResults" AfterTargets="Clean">
        <RemoveDir Directories="$(VSTestResultsDirectory)" Condition="Exists($(VSTestResultsDirectory))" ContinueOnError="true"/>
    </Target>

    <Target Name="CleanBenchmarkResults" AfterTargets="Clean">
        <RemoveDir Directories="$(__X_BenchmarkResultsSubdirectory)" Condition="Exists($(__X_BenchmarkResultsSubdirectory))" ContinueOnError="true"/>
    </Target>

    <PropertyGroup>
        <PackageVersion>$(Version)$(VersionSuffix)</PackageVersion>
        <AssemblyVersion>$(Version).0</AssemblyVersion>
        <FileVersion>$(Version).0</FileVersion>
        <InformationalVersion>$(Version)$(VersionSuffix)</InformationalVersion>
    </PropertyGroup>

    <PropertyGroup>
        <PublicKey>0024000004800000940000000602000000240000525341310004000001000100c18c17a450bec4ea1d697b35548ccc0f46aab066e0a64399ad09cc24061b1a7af34d77199308630917670d31bf0898238ac4382e94d23ccdb1094c7f428a074efe56a320f030118c61d62cbf6af9a36ede5b95ce2799ed32876bace35a4b81bb31e82916945a7f9f9a75b2e581054cecd4af62af50a563babe5baf00a854f49f</PublicKey>
    </PropertyGroup>

    <Target Name="__X_Initialize">
        <PropertyGroup>
            <__X_MessagePrefix>$(MSBuildProjectName):$(TargetFramework):$(Configuration):$(Platform)</__X_MessagePrefix>
        </PropertyGroup>

        <Message Importance="high" Text="[$(__X_MessagePrefix)] Target '__X_Initialize' is being executed."/>

        <ItemGroup>
            <__X_SolutionFiles Include="$(__X_SolutionDir)\*.sln"/>
        </ItemGroup>

        <PropertyGroup>
            <__X_SolutionName>@(__X_SolutionFiles->'%(Filename)')</__X_SolutionName>
            <__X_ReleaseNotesFilePath>$([MSBuild]::NormalizePath('$(__X_SolutionDir)', '$(__X_SolutionName).ReleaseNotes.md'))</__X_ReleaseNotesFilePath>
        </PropertyGroup>

        <!-- Log internal properties -->
        <Message
            Importance="high"
            Condition="'$(__X_LogCustomProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] __X_SolutionDir = &quot;$(__X_SolutionDir)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogCustomProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] __X_SolutionName = &quot;$(__X_SolutionName)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogCustomProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] __X_SolutionFiles.Count = @(__X_SolutionFiles->Count())"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogCustomProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] __X_SolutionFiles = [&quot;@(__X_SolutionFiles, '&quot;, &quot;')&quot;]"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogCustomProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] __X_ReleaseNotesFilePath = &quot;$(__X_ReleaseNotesFilePath)&quot;"/>

        <Error
            Condition="'@(__X_SolutionFiles->Count())' != '1'"
            Text="[$(__X_MessagePrefix)] Exactly 1 solution file must be present in &quot;$(__X_SolutionDir)&quot;. Found: @(__X_SolutionFiles->Count())."/>

        <Error
            Condition="'$(__X_SolutionName)' == ''"
            Text="[$(__X_MessagePrefix)] The solution name could not be determined. Check configuration."/>

        <Error
            Condition="!$([System.IO.File]::Exists('$(__X_ReleaseNotesFilePath)'))"
            Text="[$(__X_MessagePrefix)] Release Notes file &quot;$(__X_ReleaseNotesFilePath)&quot; is not found."/>

        <PropertyGroup>
            <AssemblyOriginatorKeyFile>$([MSBuild]::NormalizePath('$(__X_SolutionDir)', 'Common', '$(__X_SolutionName).snk'))</AssemblyOriginatorKeyFile>
            <RunSettingsFilePath>$([MSBuild]::NormalizePath('$(__X_SolutionDir)', '$(__X_SolutionName).runsettings'))</RunSettingsFilePath>

            <Product>$(__X_SolutionName)</Product>
            <Description>$(Product) is the ultimate solution for .NET developers who want to streamline their development process. It provides its own helper and functional classes and interfaces as well as the extension methods for the standard .NET types. $(Product) is compatible with the older and newer .NET versions. It's the perfect way to reduce errors and save time, allowing developers to focus on creating quality code.</Description>
            <RepositoryUrl>https://github.com/HarinezumiSama/$(__X_SolutionName)</RepositoryUrl>
            <PackageProjectUrl>$(RepositoryUrl)</PackageProjectUrl>
            <PackageReleaseNotes>$([System.IO.File]::ReadAllText('$(__X_ReleaseNotesFilePath)'))</PackageReleaseNotes>
        </PropertyGroup>

        <Error
            Condition="!$([System.IO.File]::Exists('$(AssemblyOriginatorKeyFile)'))"
            Text="[$(__X_MessagePrefix)] Assembly signing key file &quot;$(AssemblyOriginatorKeyFile)&quot; is not found."/>
        <Error
            Condition="!$([System.IO.File]::Exists('$(RunSettingsFilePath)'))"
            Text="[$(__X_MessagePrefix)] Test run settings file &quot;$(RunSettingsFilePath)&quot; is not found."/>

        <!-- Log standard properties -->
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] NETCoreSdkVersion = &quot;$(NETCoreSdkVersion)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] AssemblyOriginatorKeyFile = &quot;$(AssemblyOriginatorKeyFile)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] RunSettingsFilePath = &quot;$(RunSettingsFilePath)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] BaseIntermediateOutputPath = &quot;$(BaseIntermediateOutputPath)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] OutputPath = &quot;$(OutputPath)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] PackageOutputPath = &quot;$(PackageOutputPath)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] VSTestResultsDirectory = &quot;$(VSTestResultsDirectory)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] Product = &quot;$(Product)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] Description = &quot;$(Description)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] RepositoryUrl = &quot;$(RepositoryUrl)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] PackageProjectUrl = &quot;$(PackageProjectUrl)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] PackageReleaseNotes.Length = $(PackageReleaseNotes.Length)"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] AssemblyVersion = &quot;$(AssemblyVersion)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] PackageVersion = &quot;$(PackageVersion)&quot;"/>
        <Message
            Importance="high"
            Condition="'$(__X_LogStandardProperties)' == 'true'"
            Text="[$(__X_MessagePrefix)] InformationalVersion = &quot;$(InformationalVersion)&quot;"/>
    </Target>
</Project>