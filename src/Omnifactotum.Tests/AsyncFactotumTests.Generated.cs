// <auto-generated>
//     This code was generated by T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System;
using System.Threading.Tasks;
using NUnit.Framework;

namespace Omnifactotum.Tests
{
    [TestFixture]
    internal sealed class AsyncFactotumTests
    {
        private static readonly TimeSpan TaskWaitTime = TimeSpan.FromSeconds(1);

        //// ComputeAsync

        #region Tests: ComputeAsync: Exception and message error logging: Positive

        [Test]
        public void TestComputeAsyncWith0ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute0, (Exception exception, string message) => errorLogged = true);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(0));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute1, (Exception exception, string message) => errorLogged = true, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-1));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute2, (Exception exception, string message) => errorLogged = true, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-2));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute3, (Exception exception, string message) => errorLogged = true, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-3));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute4, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-4));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute5, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-5));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute6, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-6));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute7, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-7));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute8, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-8));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute9, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-9));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute10, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-10));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute11, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-11));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute12, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-12));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute13, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-13));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute14, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-14));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute15, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-15));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute16, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-16));
            Assert.That(errorLogged, Is.False);
        }

        #endregion

        #region Tests: ComputeAsync: Exception and message error logging: Negative

        [Test]
        public void TestComputeAsyncWith0ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int>(null, (Exception exception, string message) => { }),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute0, (AsyncFactotum.LogErrorWithExceptionAndMessage)null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int>(null, (Exception exception, string message) => { }, 1),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute1, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int>(null, (Exception exception, string message) => { }, 1, 2),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute2, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute3, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute4, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute5, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute6, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute7, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute8, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute9, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute10, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute11, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute12, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute13, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute14, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute15, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute16, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Tests: ComputeAsync: Exception error logging: Positive

        [Test]
        public void TestComputeAsyncWith0ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute0, (Exception exception) => errorLogged = true);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(0));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute1, (Exception exception) => errorLogged = true, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-1));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute2, (Exception exception) => errorLogged = true, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-2));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute3, (Exception exception) => errorLogged = true, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-3));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute4, (Exception exception) => errorLogged = true, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-4));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute5, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-5));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute6, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-6));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute7, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-7));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute8, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-8));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute9, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-9));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute10, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-10));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute11, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-11));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute12, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-12));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute13, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-13));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute14, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-14));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute15, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-15));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute16, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-16));
            Assert.That(errorLogged, Is.False);
        }

        #endregion

        #region Tests: ComputeAsync: Exception error logging: Negative

        [Test]
        public void TestComputeAsyncWith0ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int>(null, (Exception exception) => { }),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute0, (AsyncFactotum.LogErrorWithException)null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int>(null, (Exception exception) => { }, 1),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute1, (AsyncFactotum.LogErrorWithException)null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int>(null, (Exception exception) => { }, 1, 2),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute2, (AsyncFactotum.LogErrorWithException)null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute3, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute4, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute5, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute6, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute7, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute8, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute9, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute10, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute11, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute12, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute13, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute14, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute15, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute16, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Tests: ComputeAsync: Message error logging: Positive

        [Test]
        public void TestComputeAsyncWith0ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute0, (string message) => errorLogged = true);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(0));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute1, (string message) => errorLogged = true, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-1));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute2, (string message) => errorLogged = true, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-2));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute3, (string message) => errorLogged = true, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-3));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute4, (string message) => errorLogged = true, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-4));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute5, (string message) => errorLogged = true, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-5));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute6, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-6));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute7, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-7));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute8, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-8));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute9, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-9));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute10, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-10));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute11, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-11));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute12, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-12));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute13, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-13));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute14, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-14));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute15, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-15));
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ComputeAsync(Compute16, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-16));
            Assert.That(errorLogged, Is.False);
        }

        #endregion

        #region Tests: ComputeAsync: Message error logging: Negative

        [Test]
        public void TestComputeAsyncWith0ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int>(null, (string message) => { }),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute0, (AsyncFactotum.LogErrorWithMessage)null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int>(null, (string message) => { }, 1),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute1, (AsyncFactotum.LogErrorWithMessage)null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int>(null, (string message) => { }, 1, 2),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute2, (AsyncFactotum.LogErrorWithMessage)null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int>(null, (string message) => { }, 1, 2, 3),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute3, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute4, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute5, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute6, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute7, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute8, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute9, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute10, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute11, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute12, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute13, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute14, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute15, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ComputeAsync(Compute16, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Tests: ComputeAsync: Default error logging: Positive

        [Test]
        public void TestComputeAsyncWith0ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute0);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(0));
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute1, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-1));
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute2, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-2));
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute3, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-3));
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute4, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-4));
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute5, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-5));
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute6, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-6));
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute7, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-7));
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute8, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-8));
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute9, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-9));
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-10));
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-11));
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-12));
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-13));
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-14));
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-15));
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ComputeAsync(Compute16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(task.Result, Is.EqualTo(-16));
        }

        #endregion

        #region Tests: ComputeAsync: Default error logging: Negative

        [Test]
        public void TestComputeAsyncWith0ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int>(null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith1ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int>(null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith2ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int>(null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith3ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int>(null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith4ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int>(null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith5ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int>(null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith6ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith7ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith8ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith9ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith10ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith11ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith12ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith13ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith14ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith15ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestComputeAsyncWith16ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ComputeAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        //// ExecuteAsync

        #region Tests: ExecuteAsync: Exception and message error logging: Positive

        [Test]
        public void TestExecuteAsyncWith0ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute0, (Exception exception, string message) => errorLogged = true);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute1, (Exception exception, string message) => errorLogged = true, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute2, (Exception exception, string message) => errorLogged = true, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute3, (Exception exception, string message) => errorLogged = true, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute4, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute5, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute6, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute7, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute8, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute9, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute10, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute11, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute12, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute13, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute14, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute15, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndExceptionAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute16, (Exception exception, string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        #endregion

        #region Tests: ExecuteAsync: Exception and message error logging: Negative

        [Test]
        public void TestExecuteAsyncWith0ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync(null, (Exception exception, string message) => { }),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute0, (AsyncFactotum.LogErrorWithExceptionAndMessage)null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int>(null, (Exception exception, string message) => { }, 1),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute1, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int>(null, (Exception exception, string message) => { }, 1, 2),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute2, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute3, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute4, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute5, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute6, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute7, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute8, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute9, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute10, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute11, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute12, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute13, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute14, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute15, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndExceptionAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception, string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute16, (AsyncFactotum.LogErrorWithExceptionAndMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Tests: ExecuteAsync: Exception error logging: Positive

        [Test]
        public void TestExecuteAsyncWith0ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute0, (Exception exception) => errorLogged = true);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute1, (Exception exception) => errorLogged = true, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute2, (Exception exception) => errorLogged = true, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute3, (Exception exception) => errorLogged = true, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute4, (Exception exception) => errorLogged = true, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute5, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute6, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute7, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute8, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute9, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute10, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute11, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute12, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute13, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute14, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute15, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndExceptionErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute16, (Exception exception) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        #endregion

        #region Tests: ExecuteAsync: Exception error logging: Negative

        [Test]
        public void TestExecuteAsyncWith0ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync(null, (Exception exception) => { }),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute0, (AsyncFactotum.LogErrorWithException)null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int>(null, (Exception exception) => { }, 1),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute1, (AsyncFactotum.LogErrorWithException)null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int>(null, (Exception exception) => { }, 1, 2),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute2, (AsyncFactotum.LogErrorWithException)null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int>(null, (Exception exception) => { }, 1, 2, 3),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute3, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute4, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute5, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute6, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute7, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute8, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute9, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute10, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute11, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute12, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute13, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute14, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute15, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndExceptionErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (Exception exception) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute16, (AsyncFactotum.LogErrorWithException)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Tests: ExecuteAsync: Message error logging: Positive

        [Test]
        public void TestExecuteAsyncWith0ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute0, (string message) => errorLogged = true);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute1, (string message) => errorLogged = true, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute2, (string message) => errorLogged = true, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute3, (string message) => errorLogged = true, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute4, (string message) => errorLogged = true, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute5, (string message) => errorLogged = true, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute6, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute7, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute8, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute9, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute10, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute11, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute12, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute13, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute14, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute15, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndMessageErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var errorLogged = false;
            var task = AsyncFactotum.ExecuteAsync(Execute16, (string message) => errorLogged = true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
            Assert.That(errorLogged, Is.False);
        }

        #endregion

        #region Tests: ExecuteAsync: Message error logging: Negative

        [Test]
        public void TestExecuteAsyncWith0ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync(null, (string message) => { }),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute0, (AsyncFactotum.LogErrorWithMessage)null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int>(null, (string message) => { }, 1),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute1, (AsyncFactotum.LogErrorWithMessage)null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int>(null, (string message) => { }, 1, 2),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute2, (AsyncFactotum.LogErrorWithMessage)null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int>(null, (string message) => { }, 1, 2, 3),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute3, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute4, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute5, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute6, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute7, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute8, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute9, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute10, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute11, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute12, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute13, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute14, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute15, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndMessageErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, (string message) => { }, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);

            Assert.That(
                () => AsyncFactotum.ExecuteAsync(Execute16, (AsyncFactotum.LogErrorWithMessage)null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Tests: ExecuteAsync: Default error logging: Positive

        [Test]
        public void TestExecuteAsyncWith0ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute0);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute1, 1);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute2, 1, 2);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute3, 1, 2, 3);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute4, 1, 2, 3, 4);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute5, 1, 2, 3, 4, 5);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute6, 1, 2, 3, 4, 5, 6);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute7, 1, 2, 3, 4, 5, 6, 7);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute8, 1, 2, 3, 4, 5, 6, 7, 8);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute9, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndDefaultErrorLoggingWhenValidArgumentsAndUnderlyingMethodSucceedsThenSucceeds()
        {
            var task = AsyncFactotum.ExecuteAsync(Execute16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
            AssertTaskFinishesFast(task);

            Assert.That(task.Exception, Is.Null);
        }

        #endregion

        #region Tests: ExecuteAsync: Default error logging: Negative

        [Test]
        public void TestExecuteAsyncWith0ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync(null),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith1ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int>(null, 1),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith2ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int>(null, 1, 2),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith3ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int>(null, 1, 2, 3),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith4ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int>(null, 1, 2, 3, 4),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith5ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int>(null, 1, 2, 3, 4, 5),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith6ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith7ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith8ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith9ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith10ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith11ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith12ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith13ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith14ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith15ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
                Throws.ArgumentNullException);
        }

        [Test]
        public void TestExecuteAsyncWith16ArgAndDefaultErrorLoggingWhenInvalidArgumentsThenThrows()
        {
            Assert.That(
                () => AsyncFactotum.ExecuteAsync<int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int>(null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                Throws.ArgumentNullException);
        }

        #endregion

        #region Private Methods

        private static void AssertTaskFinishesFast(Task task)
        {
            if (!task.Wait(TaskWaitTime))
            {
                Assert.Fail(@"The task is supposed to get completed pretty much immediately.");
            }
        }

        #endregion

        #region Private Methods: Callee: Compute

        private static int Compute0()
        {
            return 0;
        }

        private static int Compute1(int arg1)
        {
            Assert.That(arg1, Is.EqualTo(1));

            Assert.That(new[] { arg1 }, Is.Unique);

            return -1;
        }

        private static int Compute2(int arg1, int arg2)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));

            Assert.That(new[] { arg1, arg2 }, Is.Unique);

            return -2;
        }

        private static int Compute3(int arg1, int arg2, int arg3)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));

            Assert.That(new[] { arg1, arg2, arg3 }, Is.Unique);

            return -3;
        }

        private static int Compute4(int arg1, int arg2, int arg3, int arg4)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));

            Assert.That(new[] { arg1, arg2, arg3, arg4 }, Is.Unique);

            return -4;
        }

        private static int Compute5(int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5 }, Is.Unique);

            return -5;
        }

        private static int Compute6(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6 }, Is.Unique);

            return -6;
        }

        private static int Compute7(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7 }, Is.Unique);

            return -7;
        }

        private static int Compute8(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 }, Is.Unique);

            return -8;
        }

        private static int Compute9(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 }, Is.Unique);

            return -9;
        }

        private static int Compute10(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 }, Is.Unique);

            return -10;
        }

        private static int Compute11(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 }, Is.Unique);

            return -11;
        }

        private static int Compute12(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 }, Is.Unique);

            return -12;
        }

        private static int Compute13(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 }, Is.Unique);

            return -13;
        }

        private static int Compute14(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));
            Assert.That(arg14, Is.EqualTo(14));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 }, Is.Unique);

            return -14;
        }

        private static int Compute15(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));
            Assert.That(arg14, Is.EqualTo(14));
            Assert.That(arg15, Is.EqualTo(15));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 }, Is.Unique);

            return -15;
        }

        private static int Compute16(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));
            Assert.That(arg14, Is.EqualTo(14));
            Assert.That(arg15, Is.EqualTo(15));
            Assert.That(arg16, Is.EqualTo(16));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16 }, Is.Unique);

            return -16;
        }

        #endregion

        #region Private Methods: Callee: Execute

        private static void Execute0()
        {
        }

        private static void Execute1(int arg1)
        {
            Assert.That(arg1, Is.EqualTo(1));

            Assert.That(new[] { arg1 }, Is.Unique);
        }

        private static void Execute2(int arg1, int arg2)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));

            Assert.That(new[] { arg1, arg2 }, Is.Unique);
        }

        private static void Execute3(int arg1, int arg2, int arg3)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));

            Assert.That(new[] { arg1, arg2, arg3 }, Is.Unique);
        }

        private static void Execute4(int arg1, int arg2, int arg3, int arg4)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));

            Assert.That(new[] { arg1, arg2, arg3, arg4 }, Is.Unique);
        }

        private static void Execute5(int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5 }, Is.Unique);
        }

        private static void Execute6(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6 }, Is.Unique);
        }

        private static void Execute7(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7 }, Is.Unique);
        }

        private static void Execute8(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 }, Is.Unique);
        }

        private static void Execute9(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 }, Is.Unique);
        }

        private static void Execute10(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 }, Is.Unique);
        }

        private static void Execute11(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 }, Is.Unique);
        }

        private static void Execute12(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 }, Is.Unique);
        }

        private static void Execute13(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 }, Is.Unique);
        }

        private static void Execute14(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));
            Assert.That(arg14, Is.EqualTo(14));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 }, Is.Unique);
        }

        private static void Execute15(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));
            Assert.That(arg14, Is.EqualTo(14));
            Assert.That(arg15, Is.EqualTo(15));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 }, Is.Unique);
        }

        private static void Execute16(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16)
        {
            Assert.That(arg1, Is.EqualTo(1));
            Assert.That(arg2, Is.EqualTo(2));
            Assert.That(arg3, Is.EqualTo(3));
            Assert.That(arg4, Is.EqualTo(4));
            Assert.That(arg5, Is.EqualTo(5));
            Assert.That(arg6, Is.EqualTo(6));
            Assert.That(arg7, Is.EqualTo(7));
            Assert.That(arg8, Is.EqualTo(8));
            Assert.That(arg9, Is.EqualTo(9));
            Assert.That(arg10, Is.EqualTo(10));
            Assert.That(arg11, Is.EqualTo(11));
            Assert.That(arg12, Is.EqualTo(12));
            Assert.That(arg13, Is.EqualTo(13));
            Assert.That(arg14, Is.EqualTo(14));
            Assert.That(arg15, Is.EqualTo(15));
            Assert.That(arg16, Is.EqualTo(16));

            Assert.That(new[] { arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16 }, Is.Unique);
        }

        #endregion
    }
}