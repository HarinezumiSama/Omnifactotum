KeyValuePair<Tuple<string, Array>, Tuple<object, string>> :: Key:Tuple<string, Array> = {Tuple<string, Array> :: Item1:string = {string :: "Omnifactotum.Tests.ExtensionMethods.OmnifactotumGenericObjectExtensionsTests+ToPropertyStringCases"}, Item2:Array = {int[] :: [Elements:int] = {{int :: 1}, {int :: 2}, {int :: 5}}, IsFixedSize:bool = {bool :: True}, IsReadOnly:bool = {bool :: False}, IsSynchronized:bool = {bool :: False}, Length:int = {int :: 3}, LongLength:long = {long :: 3}, Rank:int = {int :: 1}, SyncRoot:object = {int[] :: { <- }}}, System.ITuple.Size:int = {int :: 2}}, Value:Tuple<object, string> = {Tuple<object, string> :: Item1:object = {Tuple<string, Array> :: Item1:string = {string :: "Omnifactotum.Tests.ExtensionMethods.OmnifactotumGenericObjectExtensionsTests+ToPropertyStringCases"}, Item2:Array = {int[] :: [Elements:int] = {{int :: 1}, {int :: 2}, {int :: 5}}, IsFixedSize:bool = {bool :: True}, IsReadOnly:bool = {bool :: False}, IsSynchronized:bool = {bool :: False}, Length:int = {int :: 3}, LongLength:long = {long :: 3}, Rank:int = {int :: 1}, SyncRoot:object = {int[] :: { <- }}}, System.ITuple.Size:int = {int :: 2}}, Item2:string = {string :: "Omnifactotum.Tests.ExtensionMethods.OmnifactotumGenericObjectExtensionsTests+ToPropertyStringCases"}, System.ITuple.Size:int = {int :: 2}}